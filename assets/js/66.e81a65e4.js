(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{822:function(e,t,a){"use strict";a.r(t);var r=a(12),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("p",[e._v("按照 "),a("a",{attrs:{href:"https://about.gitlab.com/downloads/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://about.gitlab.com/downloads/"),a("OutboundLink")],1),e._v(" 中的 "),a("a",{attrs:{href:"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/"),a("OutboundLink")],1),e._v(" 所说进行安装。")]),e._v(" "),a("h3",{attrs:{id:"首次启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首次启动"}},[e._v("#")]),e._v(" 首次启动")]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 来启动，首次启动时会打印出自动生成的各种配置文件的内容，可将之复制保存下来以备后用。")]),e._v(" "),a("h3",{attrs:{id:"解决-80-端口被占问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决-80-端口被占问题"}},[e._v("#")]),e._v(" 解决 80 端口被占问题")]),e._v(" "),a("p",[e._v("如果用浏览器打开 gitlab-ce 安装所在的主机的网页比如 192.x.x.7 时发现没有进入 gitlab 相关的正常或错误的界面，而是进入了其它页面，则说明之前 80 端口早已被占用，此时除了与其它程序共享 80 端口外，还可以将 gitlab 的端口进行调整。")]),e._v(" "),a("h4",{attrs:{id:"与其它程序共享-80-端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与其它程序共享-80-端口"}},[e._v("#")]),e._v(" 与其它程序共享 80 端口")]),e._v(" "),a("p",[e._v("gitlab 用的 web 服务程序是 nginx ，如果占用 80 端口的其它程序也是 nginx 的，则可以共享之。")]),e._v(" "),a("p",[e._v("将原先的内含 "),a("code",[e._v("listen 80")]),e._v(" 语句的比如 "),a("code",[e._v("/etc/nginx/sites-enabled/default")]),e._v(" 文件移动为 "),a("code",[e._v("/etc/nginx/conf.d/default")]),e._v(" ，然后将 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中的 "),a("code",[e._v("# nginx['custom_nginx_config'] = \"include /etc/nginx/conf.d/example.conf;\"")]),e._v(" 修改为 "),a("code",[e._v("nginx['custom_nginx_config'] = \"include /etc/nginx/conf.d/default;\"")])]),e._v(" "),a("p",[a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中默认用 HOSTNAME 来作为外部链接")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("external_url 'http://SomeHostName'\n")])])]),a("p",[e._v("这个外部链接将被用作比如用户注册确认邮件中的确认地址等 gitlab 基础功能，所以需要将其设置为浏览器可以访问到的地址，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("external_url 'http://gitlab.your-company.com'\n")])])]),a("p",[e._v("还需要在 DNS 提供商那里或是用户电脑操作系统的 hosts 文件中，将 "),a("code",[e._v("www.your-company.com")]),e._v(" 和 "),a("code",[e._v("gitlab.your-company.com")]),e._v(" 都指向同一个 IP 地址（ gitlab-ce 安装所在的主机）。")]),e._v(" "),a("p",[e._v("最后")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo service nginx restart\nsudo gitlab-ctl reconfigure\n")])])]),a("p",[e._v("即可。")]),e._v(" "),a("h4",{attrs:{id:"将-gitlab-的-80-端口进行调整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-gitlab-的-80-端口进行调整"}},[e._v("#")]),e._v(" 将 gitlab 的 80 端口进行调整")]),e._v(" "),a("p",[e._v("如果占用 80 端口的其它程序不是 nginx ，则只能调整 gitlab 的端口了。")]),e._v(" "),a("p",[e._v("从上面首次启动 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 所打印出来的信息可以看到，有个 gitlab-http.conf 文件中含有")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("listen *:80\n")])])]),a("p",[e._v("这样的信息，然后使用 "),a("code",[e._v("grep gitlab-http.conf /opt/gitlab/* -rsi")]),e._v(" 搜索一下会看到一个链接 "),a("a",{attrs:{href:"https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-cookbooks/gitlab/templates/default/nginx-gitlab-http.conf.erb",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-cookbooks/gitlab/templates/default/nginx-gitlab-http.conf.erb"),a("OutboundLink")],1),e._v("，进去就会发现")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("listen <%= listen_address %>:<%= @listen_port %>\n")])])]),a("p",[e._v("所以我们需要修改 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中的 "),a("code",[e._v("listen_port")]),e._v(" ，然后实际上是把")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# nginx['listen_port'] = nil\n")])])]),a("p",[e._v("修改为比如")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nginx['listen_port'] = 8788\n")])])]),a("p",[a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中默认用 HOSTNAME 来作为外部链接")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("external_url 'http://SomeHostName'\n")])])]),a("p",[e._v("这个外部链接将被用作比如用户注册确认邮件中的确认地址等 gitlab 基础功能，所以需要将其设置为浏览器可以访问到的地址，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("external_url 'http://192.x.x.7:8788'\n")])])]),a("p",[e._v("最后 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 即可。")]),e._v(" "),a("h3",{attrs:{id:"解决-8080-端口被占问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决-8080-端口被占问题"}},[e._v("#")]),e._v(" 解决 8080 端口被占问题")]),e._v(" "),a("p",[e._v("如果用浏览器打开 gitlab-ce 安装所在的主机的网页比如 192.x.x.7:8788 时发现所打开的 GitLab 网页出现 "),a("code",[e._v("Whoops, GitLab is taking too much time to respond")]),e._v(" 的提示，一般是因为 8080 被占用了。")]),e._v(" "),a("p",[e._v("这个就比较简单了，把 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中搜索到的 "),a("code",[e._v("8080")]),e._v(" 修改为比如 "),a("code",[e._v("8787")]),e._v(" ，最后 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 即可。")]),e._v(" "),a("h2",{attrs:{id:"帐号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#帐号"}},[e._v("#")]),e._v(" 帐号")]),e._v(" "),a("p",[e._v("首次用浏览器打开 gitlab-ce 安装所在的主机的网页比如 192.x.x.7:8788 时，会进入一个修改密码的页面，此时修改的是 gitlab-ce 的 root 帐号的密码。然后就可以进行正常的用户注册登录等操作了。")]),e._v(" "),a("h2",{attrs:{id:"邮件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邮件"}},[e._v("#")]),e._v(" 邮件")]),e._v(" "),a("p",[e._v("在一些环节比如用户注册时是需要发邮件给用户的， gitlab-ce 一开始默认是使用 "),a("code",[e._v("/usr/sbin/sendmail")]),e._v(" 来发送邮件，如果还不存在 sendmail 的话可安装 "),a("code",[e._v("sudo apt-get install postfix")]),e._v(" 并配置好，或者是按照 "),a("a",{attrs:{href:"https://docs.gitlab.com/omnibus/settings/smtp.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://docs.gitlab.com/omnibus/settings/smtp.html"),a("OutboundLink")],1),e._v(" 来修改 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 并 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 使其生效。")]),e._v(" "),a("h3",{attrs:{id:"邮件发送测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邮件发送测试"}},[e._v("#")]),e._v(" 邮件发送测试")]),e._v(" "),a("p",[e._v("邮件配置后需要测试是否配置正确。运行如下命令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("gitlab-rails console\n")])])]),a("p",[e._v("稍等二十秒左右启动控制台后，在其中使用如下命令来测试邮件是否发送成功")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Notify.test_email('destination_email@address.com', 'Message Subject', 'Message Body').deliver_now\n")])])]),a("h2",{attrs:{id:"安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[e._v("#")]),e._v(" 安全")]),e._v(" "),a("p",[e._v("作为内部使用的 Git 仓库，安全是非常重要的，因此要及时用 root 账户进入比如 "),a("a",{attrs:{href:"http://192.x.x.7:8788/admin/application_settings",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://192.x.x.7:8788/admin/application_settings"),a("OutboundLink")],1),e._v(" 进行分支保护程度、仓库可见程度、用户注册是否发送确认邮件等等默认全局设置。后续特定 Project 的分支保护程度和仓库可见程度可分别到 "),a("code",[e._v("Settings > Repository > Protected Branches")]),e._v(" 和 "),a("code",[e._v("Settings > General")]),e._v(" 中去设置，比如纯文档类的仓库，就没必要进行 Merge Request 了，每个开发人员无需 Fork 到自己名下，而是直接在原仓库的 gitlab 网页上修改，这种情况下只要到 "),a("code",[e._v("Settings > Repository > Protected Branches")]),e._v(" 中 "),a("code",[e._v("Unprotect")]),e._v(" ，并且在 Group 的 "),a("code",[e._v("Members")]),e._v(" 或 Project 的 "),a("code",[e._v("Settings > Members")]),e._v(" 中显式地将允许修改的开发人员至少添加为 Developer 即可。")]),e._v(" "),a("h2",{attrs:{id:"备份恢复迁移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备份恢复迁移"}},[e._v("#")]),e._v(" 备份恢复迁移")]),e._v(" "),a("p",[e._v("参考了 "),a("a",{attrs:{href:"http://www.cnblogs.com/lidong94/p/7161717.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitlab配置、备份、升级、迁移"),a("OutboundLink")],1),e._v(" 一文，备份方法是：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo gitlab-rake gitlab:backup:create\n")])])]),a("p",[e._v("其会在 "),a("code",[e._v("/var/opt/gitlab/backups")]),e._v(" 目录下创建一个名称类似为 "),a("code",[e._v("1516244351_2018_01_18_9.3.2_gitlab_backup.tar")]),e._v(" 的压缩包。")]),e._v(" "),a("p",[e._v("恢复方法例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo gitlab-rake gitlab:backup:restore BACKUP=1516244351\n")])])]),a("p",[e._v("迁移如同备份与恢复的步骤一样，只需要将老服务器 "),a("code",[e._v("/var/opt/gitlab/backups")]),e._v(" 目录下的备份文件复制到新服务器上的 "),a("code",[e._v("/var/opt/gitlab/backups")]),e._v(" 即可，但是需要注意的是新服务器上的 gitlab 的版本必须与创建备份时的 gitlab 版本号相同。")]),e._v(" "),a("h2",{attrs:{id:"升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#升级"}},[e._v("#")]),e._v(" 升级")]),e._v(" "),a("p",[e._v("gitlab 公司每个月 22 日都会发布升级包，参考 "),a("a",{attrs:{href:"https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/update/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Updating GitLab via omnibus-gitlab"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://docs.gitlab.com/ce/update/README.html#upgrading-without-downtime",target:"_blank",rel:"noopener noreferrer"}},[e._v("Upgrading without downtime"),a("OutboundLink")],1),e._v(" ，只要安装 gitlab 时用的是 PostgreSQL ，然后每次只升级一个中间的 minor 版本号，比如从 gitlab 9.3.2 升级到 9.4.0 或是 9.4.7 之类的，而不是直接升级到 9.5.0，那么我们的 gitlab 就可以做到无需关停（当然在运行 "),a("code",[e._v("gitlab-ctl reconfigure")]),e._v(" 的几十秒内会无法访问）就能升级。")]),e._v(" "),a("p",[e._v("在 "),a("a",{attrs:{href:"https://packages.gitlab.com/gitlab/gitlab-ce",target:"_blank",rel:"noopener noreferrer"}},[e._v("APT/YUM repository for GitLab Community Edition packages"),a("OutboundLink")],1),e._v(" 上确认自己想升级的版本号，比如 9.4.0-ce.0 ，然后具体升级流程如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt-get update\nsudo gitlab-rake gitlab:backup:create    # 进行备份操作，非必需\nsudo touch /etc/gitlab/skip-auto-migrations\nsudo apt-get install gitlab-ce=9.4.0-ce.0\nsudo SKIP_POST_DEPLOYMENT_MIGRATIONS=true gitlab-ctl reconfigure\nsudo gitlab-rake db:migrate\n")])])]),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),a("p",[e._v("gitlab-ce 内含了 redis 、 nginx 等等各种第三方软件包（被安装在 "),a("code",[e._v("/opt/gitlab/embedded/")]),e._v(" ），可以按需在 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中进行配置，详见 "),a("a",{attrs:{href:"https://docs.gitlab.com/omnibus/settings/configuration.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://docs.gitlab.com/omnibus/settings/configuration.html"),a("OutboundLink")],1),e._v(" 。")]),e._v(" "),a("p",[e._v("由 "),a("a",{attrs:{href:"https://docs.gitlab.com/omnibus/package-information/README.html#checking-for-newer-configuration-options-on-upgrade",target:"_blank",rel:"noopener noreferrer"}},[e._v("Checking for newer configuration options on upgrade"),a("OutboundLink")],1),e._v(" 可知，在首次安装 gitlab 时会自动生成 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 文件，后续升级 gitlab 时则不会自动修改该文件，这是为了避免升级过程不小心覆盖用户配置。这样也是能正常运行升级后的 gitlab 的。可以通过 "),a("code",[e._v("sudo gitlab-ctl diff-config")]),e._v(" 来查看自己的配置与原始版本 "),a("code",[e._v("/opt/gitlab/etc/gitlab.rb.template")]),e._v(" 的区别，如果追求完美的，可以将两者手工合并为新的 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 。")]),e._v(" "),a("h2",{attrs:{id:"启停"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启停"}},[e._v("#")]),e._v(" 启停")]),e._v(" "),a("p",[e._v("每次修改配置后，需要 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 来启动。\n如果想临时关闭（包括内含的 nginx 等等）的，则 "),a("code",[e._v("sudo gitlab-ctl stop")]),e._v(" 来关闭所有或是比如 "),a("code",[e._v("sudo gitlab-ctl stop nginx")]),e._v(" 来关闭其中一个。")]),e._v(" "),a("h2",{attrs:{id:"mount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mount"}},[e._v("#")]),e._v(" mount")]),e._v(" "),a("p",[e._v("对许多 Linux 系统来说，存放了用户数据的 /var/opt/gitlab/ 所在的 /var 是属于 / 分区的，一般而言 / 分区不会特别大，因此不停增长中的用户数据还是放在别的分区甚至别的电脑上更合适。一般使用 mount 来做到这一点。为保险起见，当使用 mount 时，可以在 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 添加如下语句：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# wait for /var/opt/gitlab to be mounted\nhigh_availability['mountpoint'] = '/var/opt/gitlab'\n")])])]),a("p",[e._v("当然仅仅把 Git 仓库 "),a("code",[e._v("/var/opt/gitlab/git-data")]),e._v(" 进行 mount 也是可以的。")]),e._v(" "),a("p",[e._v("最后 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 即可。")]),e._v(" "),a("h3",{attrs:{id:"mount-nfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mount-nfs"}},[e._v("#")]),e._v(" mount nfs")]),e._v(" "),a("p",[e._v("如果是远程 mount 的，经试验， sshfs 挂载的文件（夹）的权限无法满足 gitlab 的需求，所以只能用 nfs 。")]),e._v(" "),a("p",[e._v("在"),a("strong",[e._v("本地")]),e._v("停止 gitlab-ce 的运行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" sudo gitlab-ctl stop\n")])])]),a("p",[e._v("在"),a("strong",[e._v("本地")]),e._v("把本地已经存在的用户数据复制到远程去")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo rsync -avuz /var/opt/gitlab/ -e ssh root@192.x.x.8:/pub/gitlab/\n")])])]),a("p",[e._v("如果远程也存在一个叫 git 的账户的，上面的 rsync 操作会把本地上属于 git 用户/组 的文件（夹）自动转换成远程的 git 用户/组，因此还需在"),a("strong",[e._v("远程")]),e._v("上执行如下操作以将它们再转换回本地 gitlab 所创建的 git 的 id 号 998 ：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo find /pub/gitlab/ -group git -exec chgrp -h 998 {} \\;\nsudo find /pub/gitlab/ -user git -exec chown -h 998 {} \\;\n")])])]),a("p",[e._v("在"),a("strong",[e._v("远程")]),e._v("安装 nfs 服务端")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt-get install nfs-kernel-server\n")])])]),a("p",[e._v("在"),a("strong",[e._v("远程")]),e._v("配置 nfs 服务端")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo vi /etc/exports\n")])])]),a("p",[e._v("填入如下内容")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("/pub/gitlab *(rw,no_root_squash,sync,no_wdelay)\n")])])]),a("p",[e._v("在"),a("strong",[e._v("远程")]),e._v("重启 nfs 服务端")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo /etc/init.d/nfs restart\n")])])]),a("p",[e._v("在"),a("strong",[e._v("本地")]),e._v("安装 nfs 客户端")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt install nfs-common\n")])])]),a("p",[e._v("在"),a("strong",[e._v("本地")]),e._v(" mount 远程的用户数据")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo mount -t nfs 192.x.x.8:/pub/gitlab /var/opt/gitlab\n")])])]),a("p",[e._v("在"),a("strong",[e._v("本地")]),e._v("启动 gitlab-ce 的运行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo gitlab-ctl start\n")])])]),a("p",[e._v("估计是远程 mount 的关系，此次 "),a("code",[e._v("sudo gitlab-ctl start")]),e._v(" 后需要在浏览器上等待较长的二十秒钟左右才能自动结束 "),a("code",[e._v("Whoops, GitLab is taking too much time to respond")]),e._v(" 的提示，而不要误以为是前面碰到的 8080 端口被占问题。")]),e._v(" "),a("h2",{attrs:{id:"关停帐号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关停帐号"}},[e._v("#")]),e._v(" 关停帐号")]),e._v(" "),a("p",[e._v("用 root 帐号可以关停用户帐号。有三种关停方式： "),a("code",[e._v("Block user")]),e._v(" 、 "),a("code",[e._v("Remove user")]),e._v(" 、 "),a("code",[e._v("Remove user and contributions")]),e._v(" ，需要注意的是，记录在 PostgreSQL 中的 Snippets 会在后两种情况下消失。")]),e._v(" "),a("h2",{attrs:{id:"持续集成-ci"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续集成-ci"}},[e._v("#")]),e._v(" 持续集成 CI")]),e._v(" "),a("p",[e._v("让 gitlab 能够在新 commit （网页上直接修改文件内容而形成的 commit） 或 push 的事件时自动触发持续集成动作，有两个前提条件：将持续集成的具体动作比如“测试”、“部署”等 job 写在 Project 根目录中的 "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件里；在 Project 的 gitlab 网页里配置好在另外一台服务器中运行的 Runner 以便让 Runner 去运行这些 job 。")]),e._v(" "),a("p",[e._v("如果在 commit 的注释中包含 "),a("code",[e._v("[ci skip]")]),e._v(" 或 "),a("code",[e._v("[skip ci]")]),e._v(" ，无论大小写，则该 commit 不会触发 CI 。")]),e._v(" "),a("h3",{attrs:{id:"创建-gitlab-ci-yml-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-gitlab-ci-yml-文件"}},[e._v("#")]),e._v(" 创建 .gitlab-ci.yml 文件")]),e._v(" "),a("p",[e._v("参照 "),a("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/quick_start/README.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting started with GitLab CI"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/yaml/README.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configuration of your jobs with .gitlab-ci.yml"),a("OutboundLink")],1),e._v(" 两篇文章，简单来说，除了 stages 、 cache 等关键字外，其它顶行书写的都是 job 。如果 job 中没有描述 stage 字段的，则这个 job 的 stage 默认为 test 。如果存在有 stages 的比如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("stages:\n  - build\n  - test\n  - deploy\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("则首先并行执行完所有 stage 为 build 的 job ，如果这些 job 都成功了，就并行执行所有 stage 为 test 的 job ，以此类推。")]),e._v(" "),a("p",[e._v("job 中必须至少含有一个关键字 script 用来执行该 job 的动作，比如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("test_gitlab_ci:\n  script:\n    - npm install\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("为了避免经常让 npm 重新下载那些 node_modules ，可以添加 cache 关键字，比如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cache:\n  paths:\n    - node_modules/\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("在 gitlab 的 Project 页面上有 "),a("code",[e._v("Set up CI")]),e._v(" 按钮可以方便地直接跳转到 Repository 页面并且自动点击了 "),a("code",[e._v("+")]),e._v(" 按钮、自动选择了 "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 这个 Template ，只需要再人工选择一下 "),a("code",[e._v("Apply a GitLab CI Yaml template")]),e._v(" 并进行修改即可。")]),e._v(" "),a("p",[a("code",[e._v(".gitlab-ci.yml")]),e._v(" 的语法是否书写正确， 可以在 http://gitlab.your-company.com/ci/lint 中进行验证，而不用等到 Runner 报来错误再去修改。")]),e._v(" "),a("h4",{attrs:{id:"下载-artifacts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载-artifacts"}},[e._v("#")]),e._v(" 下载 artifacts")]),e._v(" "),a("p",[e._v("job 中的 artifacts 关键字除了用于在 stages 之间传递中间产物之外，也可以被从 gitlab 网页上下载，这倒是方便了最终产物比如 "),a("code",[e._v(".apk")]),e._v(" 文件的下载，详见 "),a("a",{attrs:{href:"https://docs.gitlab.com/ce/user/project/pipelines/job_artifacts.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Introduction to job artifacts"),a("OutboundLink")],1),e._v(" 。注意，如果使用了 artifacts 关键字，则要记得在里面用上 expire_in 关键字比如 "),a("code",[e._v("expire_in: 1 week")]),e._v(" 以免 artifacts 一直被保存在 gitlab 的用户数据里而占用越来越多的硬盘空间。")]),e._v(" "),a("h3",{attrs:{id:"配置-runner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-runner"}},[e._v("#")]),e._v(" 配置 Runner")]),e._v(" "),a("p",[e._v("Runner 最好是安装在与 Gitlab 不同的服务器上，因为 Runner 会消耗大量内存资源，而 Gitlab 如果没有足够内存的话会很卡顿。")]),e._v(" "),a("p",[e._v("Runner 分为两种：一个或多个 Project 特定使用的 specific Runner 以及 任何 Project 都能使用的 shared Runner 。")]),e._v(" "),a("p",[e._v("配置 Runner 时会用到 registration token ， specific Runner 的 token 是从 Project 的 "),a("code",[e._v("Settings ➔ Pipelines")]),e._v(" 页面上获取的， shared Runner 的 token 是从 root 账户的 admin/runners 页面上获取的。")]),e._v(" "),a("p",[e._v("按照 "),a("a",{attrs:{href:"http://docs.gitlab.com/runner/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Install GitLab Runner"),a("OutboundLink")],1),e._v(" 安装好 Runner ，然后在安装好 Runner 的服务器上进行配置，这里参考 "),a("a",{attrs:{href:"http://docs.gitlab.com/runner/register/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Registering Runners"),a("OutboundLink")],1),e._v(" 以 Linux 为例描述一下配置过程：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo gitlab-runner register\n")])])]),a("p",[e._v("Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com ):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("http://gitlab.your-company.com\n")])])]),a("p",[e._v("Enter the token you obtained to register the Runner:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("输入上面提到的页面里获取的 token\n")])])]),a("p",[e._v("Please enter the gitlab-ci description for this runner: 后续可在 gitlab 界面中修改")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("[hostame]: 比如输入 192.x.x.9Shell 作为 runner 的描述，暗示会使用 192.x.x.9 上的 Shell 作为运行环境，或是 192.x.x.9Docker ，或是其它可以适当描述的字符\n")])])]),a("p",[e._v("Please enter the gitlab-ci tags for this runner (comma separated): 可以为空，如果不为空或后续在 gitlab 界面中修改的话，则使得 "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 中的某个 job 有了这样的能力 —— 如果 job 中存在 tag 关键字时那就只有相同 tag 的 Runner 才允许运行这个 job")]),e._v(" "),a("p",[e._v("Whether to run untagged jobs [true/false]: 如果上面一条不为空，则会出现此条，后续可在 gitlab 界面中修改")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("[false]: 当 `.gitlab-ci.yml` 中的某个 job 中不存在 tag 关键字时，是否允许当前这个被上一条 tag 过的 Runner 运行这个 job\n")])])]),a("p",[e._v("Whether to lock Runner to current project [true/false]: 后续可在 gitlab 界面中修改")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("[false]: 后续在 gitlab 界面中修改使之按需（单向）转变为 specific Runner 即可\n")])])]),a("p",[e._v("Registering runner... succeeded                     runner=上面 token 的前 8 个字符")]),e._v(" "),a("p",[e._v("Please enter the executor: docker-ssh, shell, virtualbox, kubernetes, docker, parallels, ssh, docker+machine, docker-ssh+machine:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("选择其中之一，常用的有 shell 或者是 docker ，可以输入 shell 并回车后， 当前的 Runner 就配置好了。\n")])])]),a("p",[e._v("如果上一条输入的是 docker ，则还会出现下一条：")]),e._v(" "),a("p",[e._v("Please enter the Docker image (eg. ruby:2.1):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("可以输入某个合适的 docker 镜像名比如比较流行的体积很小的 alpine:latest 并回车后， 当前的 Runner 就配置好了。\n")])])]),a("p",[e._v("此时，使用 "),a("code",[e._v("sudo gitlab-runner list")]),e._v(" 命令就能看到已注册的 runner 列表了。更多命令使用方法详见 "),a("a",{attrs:{href:"http://docs.gitlab.com/runner/commands/README.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab Runner Commands"),a("OutboundLink")],1),e._v(" 。")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://docs.gitlab.com/runner/executors/README.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Executors"),a("OutboundLink")],1),e._v(" 中介绍了各个 excutor 的异同。")]),e._v(" "),a("h4",{attrs:{id:"shell-executor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-executor"}},[e._v("#")]),e._v(" Shell executor")]),e._v(" "),a("p",[e._v("Shell executor 相对其它 executor 来说比较容易理解和操作，在初期可以拿来熟悉 job 的运行方式。")]),e._v(" "),a("p",[e._v("在执行 job 的 script 中的命令时所需的各种依赖，比如 npm 命令本身需要安装到 /home/gitlab-runner 这个用户能够访问的路径中，可能比较麻烦，而且难以保证各个 Runner 上安装的各个软件的版本都相同，所以后期需要使用 Docker executor 。")]),e._v(" "),a("h4",{attrs:{id:"docker-executor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-executor"}},[e._v("#")]),e._v(" Docker executor")]),e._v(" "),a("p",[e._v("如果想用 Docker executor ，则在使用 Runner 之前请先安装 docker ：")]),e._v(" "),a("p",[e._v("curl -sSL https://get.docker.com/ | sh")]),e._v(" "),a("p",[e._v("至于实际使用的 docker 镜像，虽说可以在使用默认的比如 alpine:latest 或是 "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件里指定的 image: node:latest 时，在  "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件里另外安装一些必须的工具，就像下面做的那样：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("before_script:\n  - apt-get update -qq && apt-get install -qq rsync sshpass\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("但是 "),a("code",[e._v("apt-get")]),e._v(" 有时也会碰到 "),a("code",[e._v("Could not resolve 'cdn-fastly.deb.debian.org'")]),e._v(" 这样的网络问题，再考虑到 latest 所代表的意义是经常要从国内访问不太稳定的 DockerHub 上 pull 最新版本的镜像，所以最好是自己编译一个合适的特定版本镜像来长久使用，比如 "),a("a",{attrs:{href:"https://hub.docker.com/r/flyskywhy/java-nodejs/tags/",target:"_blank",rel:"noopener noreferrer"}},[e._v("flyskywhy/java-nodejs:v8.3.0"),a("OutboundLink")],1),e._v(" 。")]),e._v(" "),a("h5",{attrs:{id:"为-docker-executor-配置-dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为-docker-executor-配置-dns"}},[e._v("#")]),e._v(" 为 Docker executor 配置 DNS")]),e._v(" "),a("p",[e._v("当然，严格来说，上面 "),a("code",[e._v("apt-get")]),e._v(" 碰到的网络问题，与第一次使用 "),a("code",[e._v("Docker executor")]),e._v(" 运行 job 时极可能会遇到的 "),a("code",[e._v("fatal: unable to access 'http://gitlab-ci-token:xxxxxxxxxxxxxxxxxxxx@gitlab.your-company.com/path/to/your/project.git/': Couldn't resolve host 'gitlab.your-company.com'")]),e._v(" 属于同一个问题，解决方法是按照 "),a("a",{attrs:{href:"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/configuration/advanced-configuration.md#the-runnersdocker-section",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab CI Runner Advanced configuration"),a("OutboundLink")],1),e._v(" 中的描述，修改 "),a("code",[e._v("/etc/gitlab-runner/config.toml")]),e._v(" 文件，在 "),a("code",[e._v("[runners.docker]")]),e._v(" 小节中添加 "),a("code",[e._v('dns = ["114.114.114.114"]')]),e._v(" ，或者是添加 "),a("code",[e._v('extra_hosts = ["gitlab.your-company.com:192.x.x.7"]')]),e._v(" ，然后运行 "),a("code",[e._v("sudo gitlab-runner verify")]),e._v(" 确认没有修改出错误，最后在 gitlab 上再次运行 job 即可。")]),e._v(" "),a("h5",{attrs:{id:"把容器提交为-docker-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#把容器提交为-docker-镜像"}},[e._v("#")]),e._v(" 把容器提交为 docker 镜像")]),e._v(" "),a("p",[e._v("用 "),a("code",[e._v("docker run -i -t your-name/your-repo /bin/bash")]),e._v(" 命令把镜像变成容器运行后，在其中进行了一些修改，就可以用 "),a("code",[e._v("docker commit")]),e._v(" 命令将该容器转换成 docker 镜像。只不过这样的镜像只能被 docker 管理，如果需要同时也被 git 管理的，则可以使用下面的 Dockerfile 。")]),e._v(" "),a("h5",{attrs:{id:"从-dockerfile-编译为-docker-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从-dockerfile-编译为-docker-镜像"}},[e._v("#")]),e._v(" 从 Dockerfile 编译为 docker 镜像")]),e._v(" "),a("h6",{attrs:{id:"编写-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写-dockerfile"}},[e._v("#")]),e._v(" 编写 Dockerfile")]),e._v(" "),a("p",[e._v("可以参考一些现有的 Dockerfile 比如 "),a("a",{attrs:{href:"https://github.com/flyskywhy/docker-java-nodejs/blob/master/Dockerfile",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker-java-nodejs_Dockerfile"),a("OutboundLink")],1),e._v(" 及 "),a("a",{attrs:{href:"https://itbilu.com/linux/docker/VyhM5wPuz.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker镜像构建文件Dockerfile及相关命令介绍"),a("OutboundLink")],1),e._v(" 一文来编写适合自己项目的 Dockerfile 。")]),e._v(" "),a("h6",{attrs:{id:"手动从-dockerfile-编译-docker-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动从-dockerfile-编译-docker-镜像"}},[e._v("#")]),e._v(" 手动从 Dockerfile 编译 docker 镜像")]),e._v(" "),a("p",[e._v("可以使用 "),a("code",[e._v("docker build -t your-name/your-repo:repo-tag .")]),e._v(" 这样的命令来把当前目录中的 Dockerfile 编译成一个 docker 镜像（会被自动自动保存到 "),a("code",[e._v("/var/lib/docker/")]),e._v(" 中），此时在 "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件中写上 "),a("code",[e._v("image: your-name/your-repo:repo-tag")]),e._v(" 后， Gitlab CI 就已经能使用该镜像了。后续还可以用 "),a("code",[e._v("docker push your-name/your-repo:repo-tag")]),e._v(" 命令上传到 DockerHub 上。")]),e._v(" "),a("h6",{attrs:{id:"自动从-dockerfile-编译-docker-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动从-dockerfile-编译-docker-镜像"}},[e._v("#")]),e._v(" 自动从 Dockerfile 编译 docker 镜像")]),e._v(" "),a("p",[e._v("还有更自动、方便的方法——让 DockerHub 自动把 GitHub 上的 Dockerfile 拉过去编译，我们只需要 "),a("code",[e._v("docker pull")]),e._v(" 去使用镜像即可，这同时也避免了因为国内网络问题导致的 "),a("code",[e._v("docker build")]),e._v(" 或 "),a("code",[e._v("docker push")]),e._v(" 偶尔会失败几次。")]),e._v(" "),a("p",[e._v("自动编译 docker 镜像的方法是，按照 "),a("a",{attrs:{href:"https://docs.docker.com/docker-hub/builds/#link-to-a-hosted-repository-service",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configure automated builds on Docker Hub"),a("OutboundLink")],1),e._v(" 中所说，在登录后的 "),a("a",{attrs:{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),a("OutboundLink")],1),e._v(" 网站的 "),a("code",[e._v("Profile > Settings > Linked Accounts & Services")]),e._v(" 中选择 "),a("code",[e._v("Github")]),e._v(" ，然后选择 "),a("code",[e._v("Public and Private")]),e._v(" ，然后自动跳转到 GitHub 网站确认后，就可以在 DockerHub 网站的 "),a("code",[e._v("Create > Create Automated Build")]),e._v(" 中选择包含 Dockerfile 的某个 GitHub repository 来创建可自动编译的 DockerHub repository 。今后只要在该 GitHub repository 中进行了 commit 或 push 的操作， DockerHub 就会自动编译出相应的 docker 镜像。")]),e._v(" "),a("h5",{attrs:{id:"为-docker-executor-配置缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为-docker-executor-配置缓存"}},[e._v("#")]),e._v(" 为 Docker executor 配置缓存")]),e._v(" "),a("p",[a("code",[e._v("/etc/gitlab-runner/config.toml")]),e._v(" 文件里 "),a("code",[e._v("[runners.docker]")]),e._v(" 小节中默认存在")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('volumes = ["/cache"]\n')])])]),a("p",[e._v("的配置，既是说在容器之间需要缓存的数据是放在容器内的 /cache 卷中，具体对应宿主机上的位置则可以在容器运行时通过 "),a("code",[e._v("docker ps")]),e._v(" 得到 "),a("code",[e._v("容器id")]),e._v(" 再通过 "),a("code",[e._v("docker inspect 容器id")]),e._v(" 得知：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('"/cache": "/var/lib/docker/volumes/08869e6d033a076de6c675e77c491f487434454d8a1939e8da36f803bab6a1ec/_data"\n')])])]),a("p",[e._v("其中存放的实际上就是在 "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件中所写的")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cache:\n  paths:\n    - node_modules/\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("这个 "),a("code",[e._v("node_modules/")]),e._v(" 会被自动压缩为 /cache/your-name/your-project/default/cache.zip ，并在下一个容器中解压缩，如此来实现 "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件中的 "),a("code",[e._v("cache")]),e._v(" 功能。")]),e._v(" "),a("p",[e._v("由于 docker 有自己的策略来决定何时删除那个 cache.zip ，为了避免偶尔可能因之让我们项目中的 "),a("code",[e._v("node_modules/")]),e._v(" 重新去下载，同时为了完全避免每次在容器中下载 "),a("code",[e._v("~/.npm/")]),e._v(" ，参考 "),a("a",{attrs:{href:"https://www.colinodell.com/blog/201704/optimizing-dockerbased-ci-runners-shared-package-caches",target:"_blank",rel:"noopener noreferrer"}},[e._v("Optimizing Docker-Based CI Runners With Shared Package Caches"),a("OutboundLink")],1),e._v(" 一文，我们修改 "),a("code",[e._v("/etc/gitlab-runner/config.toml")]),e._v(" 文件内容：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('volumes = ["/srv/cache:/cache:rw"]\n')])])]),a("p",[e._v("并在 "),a("code",[e._v(".gitlab-ci.yml")]),e._v(" 文件中编写如下内容：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("before_script:\n  - export YARN_CACHE_FOLDER=/cache/yarn\n  - export NPM_CONFIG_CACHE=/cache/npm\n  - export bower_storage__packages=/cache/bower\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("即可。")]),e._v(" "),a("p",[e._v("此种配置下用 "),a("code",[e._v("docker inspect 容器id")]),e._v(" 就会看到：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('"/cache": "/srv/cache"\n')])])]),a("h5",{attrs:{id:"一些-docker-常见错误的解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些-docker-常见错误的解决"}},[e._v("#")]),e._v(" 一些 docker 常见错误的解决")]),e._v(" "),a("p",[e._v("如果 Gitlab 的 "),a("code",[e._v("Pipelines ➔ Jobs")]),e._v(" 中的命令行打印出 "),a("code",[e._v("System error: open /sys/fs/cgroup/cpu,cpuacct/init.scope/system.slice/")]),e._v(" 这样的错误，则需要：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo vi /lib/systemd/system/docker.service\n...\n[Service]\nExecStart=/usr/bin/docker -d -H fd:// --exec-opt native.cgroupdriver=cgroupfs\n...\n\n然后再通过如下方式来使能上述配置：\n$ sudo systemctl daemon-reload\n$ sudo service docker stop\n$ sudo service docker start\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("如果 docker pull 时碰到 timeout ，那是因为墙引起的 DockerHub 网络不稳定，多试几次就好了，或者换到国内的源比如 DaoCloud ，或者直接按照 "),a("a",{attrs:{href:"https://docs.gitlab.com/runner/executors/docker.html#how-pull-policies-work",target:"_blank",rel:"noopener noreferrer"}},[e._v("How pull policies work"),a("OutboundLink")],1),e._v(" 中所说，在 "),a("code",[e._v("/etc/gitlab-runner/config.toml")]),e._v(" 文件里 "),a("code",[e._v("[runners.docker]")]),e._v(" 小节中添加")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('pull_policy = "never"\n')])])]),a("h4",{attrs:{id:"virtualbox-executor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#virtualbox-executor"}},[e._v("#")]),e._v(" VirtualBox executor")]),e._v(" "),a("p",[e._v("可以用来在虚拟机中的 macOS 中编译 iOS APP ，参见 "),a("RouterLink",{attrs:{to:"/编程语言/JavaScript/ReactNative项目中命令行编译iOS版的方法.html"}},[e._v("ReactNative项目中命令行编译iOS版的方法")]),e._v(" 。实际使用中发现用 "),a("code",[e._v("Shell executor")]),e._v(" 连接持续开启中的 macOS 虚拟机也是挺方便的。")],1),e._v(" "),a("h4",{attrs:{id:"将-runner-运行在-docker-中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-runner-运行在-docker-中"}},[e._v("#")]),e._v(" 将 Runner 运行在 docker 中")]),e._v(" "),a("p",[e._v("按照 "),a("a",{attrs:{href:"http://docs.gitlab.com/runner/install/docker.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Run GitLab Runner in a container"),a("OutboundLink")],1),e._v(" 所说，如果你的项目的确有这个需求，你甚至能将 Runner 本身运行在 docker 中！")]),e._v(" "),a("h2",{attrs:{id:"持续部署-cd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续部署-cd"}},[e._v("#")]),e._v(" 持续部署 CD")]),e._v(" "),a("p",[e._v("按照 "),a("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/environments.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Introduction to environments and deployments"),a("OutboundLink")],1),e._v(" 一文我们可以进行持续部署。")]),e._v(" "),a("p",[e._v("Project 的 "),a("code",[e._v("Pipelines ➔ Environments")]),e._v(" 页面中的那个 "),a("code",[e._v("New environment")]),e._v(" 不建议使用，而是在 job 中来建立。")]),e._v(" "),a("p",[e._v("在比如下面的 job 中：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('deploy_staging:\n  stage: deploy\n  script:\n    - echo "Deploy to staging server"\n  environment:\n    name: staging\n    url: https://staging.example.com\n  only:\n    - master\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("我们设定了 environment 是 staging ，这样当这个 job 被 Runner 执行后，我们就会在 Project 的 "),a("code",[e._v("Pipelines ➔ Environments")]),e._v(" 中看到一个叫做 staging 的 environment 中的部署历史记录，在历史记录多于一个时，会看到旧的历史记录上的按钮变成了 Rollback ，如果网站足够简单就可以方便地点击该按钮进行部署回滚。")]),e._v(" "),a("p",[e._v("这里的 url 会在 gitlab 的许多网页中出现，当上面的 script 中比如用 rsync 命令真正地去部署后，这些网页中的这些 url 就能真正点击进入了。")]),e._v(" "),a("p",[e._v("一般在 rsync 中会用到部署目标服务器的用户名和密码，这些需要保密的变量名字需要设置在 "),a("code",[e._v("Settings ➔ Pipelines")]),e._v(" 页面中的 "),a("code",[e._v("Secret variables")]),e._v(" 处。在 "),a("code",[e._v("Settings ➔ Members")]),e._v(" 中可以添加其它用户作为 Guest 、 Reporter 、 Developer 、 Master 中的某个角色，而除了 Master 以外，其它角色都不能访问 "),a("code",[e._v("Settings ➔ Pipelines")]),e._v(" 页面。另外，如果担心 "),a("code",[e._v("Pipelines ➔ Jobs")]),e._v(" 中的命令行打印信息透露一些细节，还可以在 "),a("code",[e._v("Settings ➔ Pipelines")]),e._v(" 页面中去掉 "),a("code",[e._v("Public pipelines")]),e._v(" 的勾选。")]),e._v(" "),a("p",[e._v("比如在 "),a("code",[e._v("Secret variables")]),e._v(" 中添加了 DEPLOY_USER 和 DEPLOY_PASSWORD 之后，就可以如 "),a("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Variables"),a("OutboundLink")],1),e._v(" 中所说，在 job 中的 script 里写成如下形式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  script:\n    - sshpass -p $DEPLOY_PASSWORD rsync -avuzq build/ -e 'ssh -oStrictHostKeyChecking=no' $DEPLOY_USER@112.113.114.115:~/your-project/\n    - sshpass -p $DEPLOY_PASSWORD ssh -o StrictHostKeyChecking=no $DEPLOY_USER@112.113.114.115 \". .profile && cd ~/your-project/ && pm2 restart pm2.config.js\"\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"直接编译为-docker-镜像并进行部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接编译为-docker-镜像并进行部署"}},[e._v("#")]),e._v(" 直接编译为 docker 镜像并进行部署")]),e._v(" "),a("p",[e._v("目前业界有一种趋势：直接将应用代码编译为一个 docker 镜像，然后运行这个镜像中的应用代码的测试脚本，然后把这个测试通过的镜像 push 到（自己私有的） Docker Registry 中，最后把这个镜像从 Docker Registry 中部署到生产服务器上。不过正如 "),a("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/docker/using_docker_build.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using Docker Build"),a("OutboundLink")],1),e._v(" 中所说，三种实现该目标的方法各有利弊，需要权衡选择。另外根据 "),a("a",{attrs:{href:"http://www.linuxeden.com/a/9864",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spotify 的容器使用情况"),a("OutboundLink")],1),e._v(" 中所说，如果使用这种方式，还需要承担 docker 自身可能出现的一些问题。总的来说，请根据项目实际需要，权衡是否选择此种部署方式。具体操作可以参考 "),a("RouterLink",{attrs:{to:"/blogs/2018/GitLab自动部署nodejs应用到阿里云Kubernetes集群中.html"}},[e._v("GitLab自动部署nodejs应用到阿里云Kubernetes集群中")]),e._v(" 一文。")],1),e._v(" "),a("h2",{attrs:{id:"https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[e._v("#")]),e._v(" https")]),e._v(" "),a("h3",{attrs:{id:"首次添加-ssl-证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首次添加-ssl-证书"}},[e._v("#")]),e._v(" 首次添加 SSL 证书")]),e._v(" "),a("p",[e._v("gitlab 默认是 http 的，如果想开启 https ，首先需要比如到 "),a("a",{attrs:{href:"http://www.cnblogs.com/joshua317/p/6179311.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("阿里云免费申请免费SSL证书"),a("OutboundLink")],1),e._v(" ，然后参考 "),a("a",{attrs:{href:"https://docs.gitlab.com/omnibus/settings/nginx.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("NGINX settings"),a("OutboundLink")],1),e._v(" 将获得的证书复制并重命名，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo mkdir -p /etc/gitlab/ssl\nsudo chmod 700 /etc/gitlab/ssl\nsudo cp 123456789012345.key /etc/gitlab/ssl/gitlab.your-company.com.key\nsudo cp 123456789012345.pem /etc/gitlab/ssl/gitlab.your-company.com.crt\n")])])]),a("p",[e._v("再搜索并修改 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中相应的条目：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("external_url 'http://gitlab.your-company.com'\nnginx['redirect_http_to_https'] = true\n")])])]),a("p",[e._v("最后 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 即可。")]),e._v(" "),a("p",[e._v("最后的最后，如果之前配置过 Runner ，则还需到 Runner 的服务器上将 "),a("code",[e._v("/etc/gitlab-runner/config.toml")]),e._v(" 文件里的 url 修改为 https 的并 "),a("code",[e._v("sudo gitlab-runner restart")]),e._v(" 即可。")]),e._v(" "),a("h3",{attrs:{id:"以后更新-ssl-证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以后更新-ssl-证书"}},[e._v("#")]),e._v(" 以后更新 SSL 证书")]),e._v(" "),a("p",[e._v("复制新证书到 "),a("code",[e._v("/etc/gitlab/ssl/")]),e._v(" 后，执行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo gitlab-ctl hup nginx\n")])])]),a("h2",{attrs:{id:"npm-install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-install"}},[e._v("#")]),e._v(" npm install")]),e._v(" "),a("p",[e._v("如果托管在 gitlab 中的仓库想要被 "),a("code",[e._v("npm install")]),e._v(" 安装，比如 "),a("code",[e._v("npm install git+https://gitlab.your-company.com/github/flyskywhy/react-web.git#5856028")]),e._v(" ，则需要在 gitlab 网页上设置该仓库 "),a("code",[e._v("Settings | General | Project Visibility")]),e._v(" 为 "),a("code",[e._v("Public")]),e._v(" 。否则会报例如如下错误：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("npm ERR! fatal: Authentication failed for 'https://gitlab.your-company.com/github/flyskywhy/react-web.git/'\n")])])]),a("h2",{attrs:{id:"_403-forbidden"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_403-forbidden"}},[e._v("#")]),e._v(" 403 Forbidden")]),e._v(" "),a("p",[e._v("如果未经授权访问 gitlab 上的仓库超过默认的 10 次（ "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中 maxretry 为 10 ），比如前述 "),a("code",[e._v("npm install")]),e._v(" 出错超过 10 次，则会无法访问 gitlab 一小时。解决的方法是临时修改 "),a("code",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" 中的")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("## gitlab_rails['rack_attack_git_basic_auth'] = {\n    # Rack Attack IP banning enabled\n##   'enabled' => true,\n    # Whitelist requests from 127.0.0.1 for web proxies (NGINX/Apache) with incorrect headers\n##   'ip_whitelist' => [\"127.0.0.1\"],\n    # Limit the number of Git HTTP authentication attempts per IP\n##   'maxretry' => 10,\n    # Reset the auth attempt counter per IP after 60 seconds\n##   'findtime' => 60,\n    # Ban an IP for one hour (3600s) after too many auth attempts\n##   'bantime' => 3600\n## }\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("p",[e._v("为")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" gitlab_rails['rack_attack_git_basic_auth'] = {\n   'enabled' => false,\n##   'ip_whitelist' => [\"127.0.0.1\"],\n##   'maxretry' => 10,\n##   'findtime' => 60,\n##   'bantime' => 3600\n }\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("然后 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" ，确认可以访问 gitlab 了，再修改回来后 "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" 即可。")])])}),[],!1,null,null,null);t.default=s.exports}}]);