(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{683:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_BrJYnTMkza.1ffc672a.png"},684:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_Kz8SJd13tc.72862498.png"},685:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_8OMJxcma9F.07c7b556.png"},686:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_avYb34o8Qu.a0b01c31.png"},687:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_TSGzq6MSgF.abb58357.png"},688:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_KrVYA7nwG2.e1f5fdad.png"},689:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_d4ZUSp9Tv6.7d1ea7d6.png"},690:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_h5IQqsxbZr.c371f6b2.png"},691:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_1HFnjlZrOS.fe47964c.png"},692:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_mlPMbPzn15.c4d9046c.png"},693:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_mjooRhxN72.187c4dd7.png"},694:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_9f4SneZsq0.77878b2e.png"},695:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_gA7fA7NUI5.184736af.png"},696:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_Nro0UlQrne.adbcf697.png"},697:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_QlXtzrjQCl.a8eeb72d.png"},698:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_Fy6PpLW8O8.afd05df6.png"},699:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_5fMa0Zcfvg.90ef88ed.png"},700:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_v3Cyz9Fz0b.c5da4703.png"},701:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_Fw7S9Hgnfm.84aeb6e8.png"},702:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_xMwn3uqwNo.d052a212.png"},703:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_axWZFMHbO2.92d195e4.png"},704:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_ERyqNArb4D.cda4e8fc.png"},705:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_V9uluYSzTS.4428fca2.png"},706:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_DarqlXM1EI.3aa41653.png"},707:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_EHqyX49Tis.cba28218.png"},708:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_w9ow59CpIT.657f074d.png"},709:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_S7DCEU0rFb.26e98737.png"},710:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_ZClI9NdhSq.f4181e6d.png"},711:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_o83FYh9tTK.4bb635b5.png"},712:function(s,t,a){s.exports=a.p+"assets/img/2019_08_02_AC8dkguz3x.a0e1bb65.png"},859:function(s,t,a){"use strict";a.r(t);var n=a(12),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"结构体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[s._v("#")]),s._v(" 结构体")]),s._v(" "),n("p",[s._v("􏰁 基本语法")]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" 结构体名称 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    field1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" \n    field2 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("注意事项和细节说明")]),s._v(" "),n("ul",[n("li",[s._v("字段声明语法同变量，示例:字段名 字段类型")]),s._v(" "),n("li",[s._v("字段的类型可以为:基本类型、数组或引用类型")]),s._v(" "),n("li",[s._v("在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值(默认值)")]),s._v(" "),n("li",[s._v("指针，slice，和 map 的零值都是 nil ，即还没有分配空间。")])]),s._v(" "),n("blockquote",[n("p",[s._v("不同结构体变量的字段是独立，互不影响，一个结构体变量字段的更改，不影响另外一个, 结构体是值类型。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(683),alt:"2019_08_02_BrJYnTMkza.png"}})]),s._v(" "),n("h3",{attrs:{id:"创建结构体变量和访问结构体字段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建结构体变量和访问结构体字段"}},[s._v("#")]),s._v(" 创建结构体变量和访问结构体字段")]),s._v(" "),n("ul",[n("li",[s._v("var person Person")]),s._v(" "),n("li",[s._v("var person Person = Person{}")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(684),alt:"2019_08_02_Kz8SJd13tc.png"}})]),s._v(" "),n("ul",[n("li",[s._v("var person *Person = new (Person)")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(685),alt:"2019_08_02_8OMJxcma9F.png"}})]),s._v(" "),n("ul",[n("li",[s._v("var person *Person = &Person{}")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(686),alt:"2019_08_02_avYb34o8Qu.png"}})]),s._v(" "),n("ol",[n("li",[s._v("第 3 种和第 4 种方式返回的是 结构体指针。")]),s._v(" "),n("li",[s._v('结构体指针访问字段的标准方式应该是:(*结构体指针).字段名 ，比如 (*person).Name = "tom"')]),s._v(" "),n("li",[s._v('但go做了一个简化，也支持结构体指针.字段名, 比如person.Name="tom"。更加符合程序员 使用的习惯，go 编译器底层 对 person.Name 做了转化 (*person).Name。')])]),s._v(" "),n("h3",{attrs:{id:"struct-类型的内存分配机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#struct-类型的内存分配机制"}},[s._v("#")]),s._v(" struct 类型的内存分配机制")]),s._v(" "),n("p",[n("img",{attrs:{src:a(687),alt:"2019_08_02_TSGzq6MSgF.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(688),alt:"2019_08_02_KrVYA7nwG2.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(689),alt:"2019_08_02_d4ZUSp9Tv6.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(690),alt:"2019_08_02_h5IQqsxbZr.png"}})]),s._v(" "),n("p",[s._v("结构体使用注意事项和细节")]),s._v(" "),n("ul",[n("li",[s._v("结构体的所有字段在内存中是连续的")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(691),alt:"2019_08_02_1HFnjlZrOS.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(692),alt:"2019_08_02_mlPMbPzn15.png"}})]),s._v(" "),n("h3",{attrs:{id:"疑问-️"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#疑问-️"}},[s._v("#")]),s._v(" 疑问⁉️")]),s._v(" "),n("p",[s._v("为什么uint8内存中占了4位，bool占了8位？")]),s._v(" "),n("p",[s._v("难道是内存中还存了额外的属性，比如类型？")]),s._v(" "),n("p",[n("img",{attrs:{src:a(693),alt:"2019_08_02_mjooRhxN72.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(694),alt:"2019_08_02_9f4SneZsq0.png"}})]),s._v(" "),n("ul",[n("li",[s._v("结构体是用户单独定义的类型，和其它类型进行转换时需要有完全相同的字段(名字、个数和类型)")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(695),alt:"2019_08_02_gA7fA7NUI5.png"}})]),s._v(" "),n("ul",[n("li",[s._v("结构体进行 type 重新定义(相当于取别名)，Golang 认为是新的数据类型，但是相互间可以强转")]),s._v(" "),n("li",[s._v("struct 的每个字段上，可以写上一个 tag, 该 tag 可以通过反射机制获取，常见的使用场景就是序列化和反序列化")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(696),alt:"2019_08_02_Nro0UlQrne.png"}})]),s._v(" "),n("h3",{attrs:{id:"方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[s._v("#")]),s._v(" 方法")]),s._v(" "),n("blockquote",[n("p",[s._v("Golang 中的方法是作用在指定的数据类型上的(即:和指定的数据类型绑定)，因此自定义类型， 都可以有方法，而不仅仅是 struct。")])]),s._v(" "),n("h4",{attrs:{id:"方法的声明和调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法的声明和调用"}},[s._v("#")]),s._v(" 方法的声明和调用")]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" A "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Num "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\nfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("func (a A) test() {} 表示 A 结构体有一方法，方法名为 test")]),s._v(" "),n("li",[s._v("(a A) 体现 test 方法是和 A 类型绑定的")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(697),alt:"2019_08_02_QlXtzrjQCl.png"}})]),s._v(" "),n("ul",[n("li",[s._v("test 方法和 Person 类型绑定")]),s._v(" "),n("li",[s._v("test 方法只能通过 Person 类型的变量来调用，而不能直接调用，也不能使用其它类型变量来调")]),s._v(" "),n("li",[s._v("func (p Person) test() {}... p 表示哪个 Person 变量调用，这个 p 就是它的副本, 这点和函数传参非常相似。")]),s._v(" "),n("li",[s._v("p 这个名字，有程序员指定，不是固定, 比如修改成 person 也是可以")])]),s._v(" "),n("h3",{attrs:{id:"方法快速入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法快速入门"}},[s._v("#")]),s._v(" 方法快速入门")]),s._v(" "),n("p",[s._v("方法的调用和传参机制原理")]),s._v(" "),n("p",[s._v("方法的调用和传参机制和函数基本一样，不一样的地方是方法调用时，会将调用方法的变量，当做实参也传递给方法。下面我们举例说明")]),s._v(" "),n("ul",[n("li",[s._v("在通过一个变量去调用方法时，其调用机制和函数一样")]),s._v(" "),n("li",[s._v("不一样的地方时，变量调用方法时，该变量本身也会作为一个参数传递到方法(如果变量是值类型，则进行值拷贝，如果变量是引用类型，则进行地质拷贝)")])]),s._v(" "),n("p",[s._v("方法的声明(定义)")]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("recevier "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("methodName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("参数列表"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("返回值列表"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    方法体\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" 返回值\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"方法的注意事项和细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法的注意事项和细节"}},[s._v("#")]),s._v(" 方法的注意事项和细节")]),s._v(" "),n("ul",[n("li",[s._v("结构体类型是值类型，在方法调用中，遵守值类型的传递机制，是值拷贝传递方式")]),s._v(" "),n("li",[s._v("如程序员希望在方法中，修改结构体变量的值，可以通过结构体指针的方式来处理")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(698),alt:"2019_08_02_Fy6PpLW8O8.png"}})]),s._v(" "),n("ul",[n("li",[s._v("Golang 中的方法作用在指定的数据类型上的(即:和指定的数据类型绑定)，因此自定义类型，都可以有方法，而不仅仅是 struct， 比如 int , float32 等都可以有方法")]),s._v(" "),n("li",[s._v("方法的访问范围控制的规则，和函数一样。方法名首字母小写，只能在本包访问，方法首字母大写，可以在本包和其它包访问。")]),s._v(" "),n("li",[n("strong",[s._v("如果一个类型实现了 String()这个方法，那么 fmt.Println 默认会调用这个变量的 String()进行输出")])])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Car "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Name "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("car Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"car String"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    car "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"duc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// car String")]),s._v("\n    \n    car1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"duc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// car String")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 因为底层会处理 car -> *car")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n############################\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Car "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Name "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("car "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"car String"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    car "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"duc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// {duc} 底层处理后调用不到String")]),s._v("\n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// car String")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br")])]),n("h3",{attrs:{id:"方法和函数区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法和函数区别"}},[s._v("#")]),s._v(" 方法和函数区别")]),s._v(" "),n("ul",[n("li",[s._v("调用方式不一样\n"),n("ul",[n("li",[s._v("函数的调用方式: 函数名(实参列表)")]),s._v(" "),n("li",[s._v("方法的调用方式: 变量.方法名(实参列表)")])])]),s._v(" "),n("li",[s._v("对于普通函数，接收者为值类型时，不能将指针类型的数据直接传递，反之亦然")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(699),alt:"2019_08_02_5fMa0Zcfvg.png"}})]),s._v(" "),n("ul",[n("li",[s._v("对于方法(如 struct 的方法)，接收者为值类型时，可以直接用指针类型的变量调用方法，反过来同样也可以")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(700),alt:"2019_08_02_v3Cyz9Fz0b.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(701),alt:"2019_08_02_Fw7S9Hgnfm.png"}})]),s._v(" "),n("h3",{attrs:{id:"创建结构体变量时指定字段值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建结构体变量时指定字段值"}},[s._v("#")]),s._v(" 创建结构体变量时指定字段值")]),s._v(" "),n("ul",[n("li",[s._v("Golang 在创建结构体实例(变量)时，可以直接指定字段的值")])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Car "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Name "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n    Price "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\ncar "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"car"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\ncar1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"car"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    Price"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n########\ncar "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"car"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\ncar1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"car"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    Price"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h3",{attrs:{id:"继承基本介绍和示意图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#继承基本介绍和示意图"}},[s._v("#")]),s._v(" 继承基本介绍和示意图")]),s._v(" "),n("p",[n("img",{attrs:{src:a(702),alt:"2019_08_02_xMwn3uqwNo.png"}})]),s._v(" "),n("blockquote",[n("p",[s._v("在 Golang 中，如果一个 struct 嵌套了另一个匿名结构体，那么这个结构体可以直接访问匿名结构体的字段和方法，从而实现了继承特性。")])]),s._v(" "),n("h3",{attrs:{id:"嵌套匿名结构体的基本语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#嵌套匿名结构体的基本语法"}},[s._v("#")]),s._v(" 嵌套匿名结构体的基本语法")]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Goods "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    Name "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n\tPrice "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Book "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tGoods "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这里就是嵌套匿名结构体 Goods Writer string")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("结构体可以使用嵌套匿名结构体所有的字段和方法，即:首字母大写或者小写的字段、方法，都可以使用。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(703),alt:"2019_08_02_axWZFMHbO2.png"}})]),s._v(" "),n("ul",[n("li",[s._v("匿名结构体字段访问可以简化")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(704),alt:"2019_08_02_ERyqNArb4D.png"}})]),s._v(" "),n("ol",[n("li",[s._v("当我们直接通过 b 访问字段或方法时，其执行流程如下比如 b.Name")]),s._v(" "),n("li",[s._v("编译器会先看 b 对应的类型有没有 Name, 如果有，则直接调用 B 类型的 Name 字段")]),s._v(" "),n("li",[s._v("如果没有就去看 B 中嵌入的匿名结构体 A 有没有声明 Name 字段，如果有就调用,如果没有继续查找..如果都找不到就报错.")])]),s._v(" "),n("ul",[n("li",[s._v("当结构体和匿名结构体有相同的字段或者方法时，编译器采用就近访问原则访问，如希望访问匿名结构体的字段和方法，可以通过匿名结构体名来区分")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(705),alt:"2019_08_02_V9uluYSzTS.png"}})]),s._v(" "),n("ul",[n("li",[s._v("结构体嵌入两个(或多个)匿名结构体，如两个匿名结构体有相同的字段和方法(同时结构体本身没有同名的字段和方法)，在访问时，就必须明确指定匿名结构体名字，否则编译报错")]),s._v(" "),n("li",[s._v("如果一个 struct 嵌套了一个有名结构体，这种模式就是组合，如果是组合关系，那么在访问组合的结构体的字段或方法时，必须带上结构体的名字")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(706),alt:"2019_08_02_DarqlXM1EI.png"}})]),s._v(" "),n("ul",[n("li",[s._v("嵌套匿名结构体后，也可以在创建结构体变量(实例)时，直接指定各个匿名结构体字段的值")]),s._v(" "),n("li",[s._v("字段是基本数据类型")])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Car "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\ncar "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" Car"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\ncar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1000")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"多重继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多重继承"}},[s._v("#")]),s._v(" 多重继承")]),s._v(" "),n("blockquote",[n("p",[s._v("如一个 struct 嵌套了多个匿名结构体，那么该结构体可以直接访问嵌套的匿名结构体的字段和方法，从而实现了多重继承。")])]),s._v(" "),n("ul",[n("li",[s._v("如嵌入的匿名结构体有相同的字段名或者方法名，则在访问时，需要通过匿名结构体类型名来")]),s._v(" "),n("li",[s._v("为了保证代码的简洁性，建议大家尽量不使用多重继承")])]),s._v(" "),n("h3",{attrs:{id:"接口-interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口-interface"}},[s._v("#")]),s._v(" 接口(interface)")]),s._v(" "),n("blockquote",[n("p",[s._v("按顺序,我们应该讲解多态,但是在讲解多态前,我们需要讲解接口(interface)，因为在 Golang 中 多态特性主要是通过接口来体现的。")])]),s._v(" "),n("p",[s._v("Golang 中的接口，不需要显式的实现。只要一个变量，含有接口类型中的所有方法，那么这个变量就实现这个接口。因此，Golang 中没有 implement 这样的关键字。")]),s._v(" "),n("h4",{attrs:{id:"注意事项和细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意事项和细节"}},[s._v("#")]),s._v(" 注意事项和细节")]),s._v(" "),n("ol",[n("li",[s._v("接口本身不能创建实例,但是可以指向一个实现了该接口的自定义类型的变量(实例)")]),s._v(" "),n("li",[s._v("接口中所有的方法都没有方法体,即都是没有实现的方法")]),s._v(" "),n("li",[s._v("在 Golang 中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型实现了该接口")]),s._v(" "),n("li",[s._v("一个自定义类型只有实现了某个接口，才能将该自定义类型的实例(变量)赋给接口类型")]),s._v(" "),n("li",[s._v("只要是自定义数据类型，就可以实现接口，不仅仅是结构体类型。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(707),alt:"2019_08_02_EHqyX49Tis.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(708),alt:"2019_08_02_w9ow59CpIT.png"}})]),s._v(" "),n("ol",{attrs:{start:"6"}},[n("li",[s._v("一个自定义类型可以实现多个接口")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(709),alt:"2019_08_02_S7DCEU0rFb.png"}})]),s._v(" "),n("ol",{attrs:{start:"7"}},[n("li",[s._v("Golang 接口中不能有任何变量")]),s._v(" "),n("li",[s._v("一个接口(比如 A 接口)可以继承多个别的接口(比如 B,C 接口)，这时如果要实现 A 接口，也必须将 B,C 接口的方法也全部实现。")]),s._v(" "),n("li",[s._v("interface 类型默认是一个指针(引用类型)，如果没有对 interface 初始化就使用，那么会输出 nil")]),s._v(" "),n("li",[s._v("空接口 interface{} 没有任何方法，所以"),n("strong",[s._v("所有类型都实现了空接口")]),s._v(", 即我们可以把任何一个变量赋给空接口。")])]),s._v(" "),n("h3",{attrs:{id:"多态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[s._v("#")]),s._v(" 多态")]),s._v(" "),n("p",[n("img",{attrs:{src:a(710),alt:"2019_08_02_ZClI9NdhSq.png"}})]),s._v(" "),n("h3",{attrs:{id:"类型断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[s._v("#")]),s._v(" 类型断言")]),s._v(" "),n("blockquote",[n("p",[s._v("类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型，就需要使用类型断言")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(711),alt:"2019_08_02_o83FYh9tTK.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(712),alt:"2019_08_02_AC8dkguz3x.png"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);