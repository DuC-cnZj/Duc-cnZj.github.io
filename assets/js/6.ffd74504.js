(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{674:function(s,t,a){s.exports=a.p+"assets/img/2019_07_28_mCViFCCSix.f414da85.png"},675:function(s,t,a){s.exports=a.p+"assets/img/2019_07_28_MyfIMimJzz.d39cfb76.png"},676:function(s,t,a){s.exports=a.p+"assets/img/2019_07_28_pe1Xmt26p9.fa426adf.png"},677:function(s,t,a){s.exports=a.p+"assets/img/2019_07_28_DeiJwS3f8o.a3f683f4.png"},678:function(s,t,a){s.exports=a.p+"assets/img/2019_07_28_W4oOtQlYKK.4eb86f7a.png"},679:function(s,t,a){s.exports=a.p+"assets/img/2019_07_28_KAk0d9mhZC.88bf0534.png"},680:function(s,t,a){s.exports=a.p+"assets/img/2019_07_28_6fsSGQnRWD.1865d0a8.png"},681:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_jirWD1S0uz.bf953c06.png"},682:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_9c2gGik7LS.95bf08c0.png"},683:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_oKK4RWgEPf.489a1422.png"},684:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_okC3RrPTva.cceae9c5.png"},685:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_LnbvMIacRc.9e1772d0.png"},686:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_nKxvcn7HUC.b9d5b1f0.png"},687:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_VrchxNcjuT.7507d71c.png"},688:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_QlaXPniL3h.83641778.png"},689:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_ZI3XsXv496.e9b09792.png"},690:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_qubcBjll1T.8f9d405a.png"},691:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_0MbS1JEpGG.455f93dc.png"},692:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_ApjZ7eqckS.60af383e.png"},693:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_mTKq9veU7q.59778638.png"},694:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_67PZMRN05w.8194fa3e.png"},695:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_ChMRLo77uU.69cc88e5.png"},696:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_L01vUXDWtq.7550c296.png"},697:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_7Kfd3wdKL6.3b093c0c.png"},698:function(s,t,a){s.exports=a.p+"assets/img/2019_07_30_muTqidWJaY.e2f8f181.png"},830:function(s,t,a){"use strict";a.r(t);var n=a(6),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"if"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if"}},[s._v("#")]),s._v(" if")]),s._v(" "),n("blockquote",[n("p",[s._v("go 没有变量提升")])]),s._v(" "),n("h3",{attrs:{id:"switch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[s._v("#")]),s._v(" switch")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上到下逐一测试，直到匹配为止。")])]),s._v(" "),n("li",[n("p",[s._v("匹配项后面也不需要再加 break")])]),s._v(" "),n("li",[n("p",[s._v("switch 的执行的流程是，先执行表达式，得到值，然后和 case 的表达式进行比较，如果相等， 就匹配到，然后执行对应的 case 的语句块，然后退出 switch 控制。")])]),s._v(" "),n("li",[n("p",[s._v("如果 switch 的表达式的值没有和任何的 case 的表达式匹配成功，则执行 default 的语句块。执行后退出 switch 的控制.")])]),s._v(" "),n("li",[n("p",[s._v("golang 的 case 后的表达式可以有多个，使用 逗号 间隔.")])]),s._v(" "),n("li",[n("p",[s._v("golang 中的 case 语句块不需要写 break , 因为默认会有,即在默认情况下，当程序执行完 case 语 句块后，就直接退出该 switch 控制结构。")])])]),s._v(" "),n("h3",{attrs:{id:"switch-的使用的注意事项和细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#switch-的使用的注意事项和细节"}},[s._v("#")]),s._v(" switch 的使用的注意事项和细节")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("case/switch 后是一个表达式( 即:常量值、变量、一个有返回值的函数等都可以)")])]),s._v(" "),n("li",[n("p",[s._v("case 后的各个表达式的值的数据类型，必须和 switch 的表达式数据类型一致")])]),s._v(" "),n("li",[n("p",[s._v("case 后面可以带多个表达式，使用逗号间隔。比如 case 表达式 1, 表达式 2 ...")])])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ok"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("switch 后也可以不带表达式，类似 if --else 分支来使用。")])]),s._v(" "),n("li",[n("p",[s._v("switch 后也可以直接声明/定义一个变量，分号结束，不推荐")])]),s._v(" "),n("li",[n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("  \n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" grade "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" grade "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  \n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n  \n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n\n\n- switch 穿透-fallthrough ，如果在 case 语句块后增加 fallthrough ,则会继续执行下一个 case，也叫 switch 穿透\n\n\n\n- Type Switch:switch 语句还可以被用于 type-switch 来判断某个 interface 变量中实际指向的变量类型\n\n\n\n​```go\n\n    var x interface{}\n\n    \n\n    switch i := x.(type) {\n\n        case nil:\n\n        .....\n\n        case int:\n\n        ...\n\n    }\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h3",{attrs:{id:"switch-和-if-的比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#switch-和-if-的比较"}},[s._v("#")]),s._v(" switch 和 if 的比较")]),s._v(" "),n("p",[s._v("总结了什么情况下使用 switch ,什么情况下使用 if")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("如果判断的具体数值不多，而且符合整数、浮点数、字符、字符串这几种类型。建议使用 swtich 语句，简洁高效。")])]),s._v(" "),n("li",[n("p",[s._v("其他情况:对区间判断和结果为 bool 类型的判断，使用 if，if 的使用范围更广。")])])]),s._v(" "),n("h3",{attrs:{id:"for"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for"}},[s._v("#")]),s._v(" for")]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//* ")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等价于*")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//*")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" val "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("range")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//* ")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历会出问题*")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解决*")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rune")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br")])]),n("p",[n("img",{attrs:{src:a(674),alt:"2019_07_28_mCViFCCSix.png"}})]),s._v(" "),n("h2",{attrs:{id:"函数、包和错误处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数、包和错误处理"}},[s._v("#")]),s._v(" 函数、包和错误处理")]),s._v(" "),n("blockquote",[n("p",[s._v("go 的每一个文件都是属于一个包的，也就是说 go 是以包的形式来管理文件和项目目录结构的*")])]),s._v(" "),n("h3",{attrs:{id:"包使用的注意事项和细节讨论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#包使用的注意事项和细节讨论"}},[s._v("#")]),s._v(" 包使用的注意事项和细节讨论")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("在给一个文件打包时，该包对应一个文件夹，比如这里的 utils 文件夹对应的包名就是 utils,文件的包名通常和文件所在的文件夹名一致，一般为小写字母。")])]),s._v(" "),n("li",[n("p",[s._v("当一个文件要使用其它包函数或变量时，需要先引入对应的包")])]),s._v(" "),n("li",[n("p",[s._v("在 import 包时，路径从 $GOPATH 的 src 下开始，不用带 src , 编译器会自动从 src 下开始引入")])]),s._v(" "),n("li",[n("p",[s._v("为了让其它包的文件，可以访问到本包的函数，则该函数名的首字母需要大写，类似其它语言 的 public ,这样才能跨包访问。")])]),s._v(" "),n("li",[n("p",[s._v("在访问其它包函数，变量时，其语法是 包名.函数名，")])]),s._v(" "),n("li",[n("p",[s._v("如果包名较长，Go 支持给包取别名， 注意细节:取别名后，原来的包名就不能使用了")])]),s._v(" "),n("li",[n("p",[s._v("在同一包下，不能有相同的函数名(也不能有相同的全局变量名)，否则报重复定义")])]),s._v(" "),n("li",[n("p",[s._v("如果你要编译成一个可执行程序文件，就需要将这个包声明为 main , 即 package main .这个就 是一个语法规范，如果你是写一个库 ，包名可以自定义")])]),s._v(" "),n("li",[n("p",[s._v("当使用"),n("code",[s._v(".")]),s._v(" 来做为包的别名时，你可以不通过包名来使用其中的项目。例如："),n("code",[s._v("test := ReturnStr()")]),s._v("。")])]),s._v(" "),n("li",[n("p",[s._v("pack1 包只导入其副作用，也就是说，****只执行它的 init 函数并初始化其中的全局变量****。")])])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./pack1"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 原来以为不使用包，现在看来这样会执行 init 函数*")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("img",{attrs:{src:a(675),alt:"2019_07_28_MyfIMimJzz.png"}})]),s._v(" "),n("ol",[n("li",[n("p",[s._v("在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间和其它的栈的空间区分开来")])]),s._v(" "),n("li",[n("p",[s._v("在每个函数对应的栈中，数据空间是独立的，不会混淆")])]),s._v(" "),n("li",[n("p",[s._v("当一个函数调用完毕(执行完毕)后，程序会销毁这个函数对应的栈空间。")])])]),s._v(" "),n("h3",{attrs:{id:"递归调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归调用"}},[s._v("#")]),s._v(" 递归调用")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("执行一个函数时，就创建一个新的受保护的独立空间(新函数栈)")])]),s._v(" "),n("li",[n("p",[s._v("函数的局部变量是独立的，不会相互影响")])]),s._v(" "),n("li",[n("p",[s._v("递归必须向退出递归的条件逼近，否则就是无限递归，死龟了:)")])]),s._v(" "),n("li",[n("p",[s._v("当一个函数执行完毕，或者遇到 return，就会返回，遵守谁调用，就将结果返回给谁，同时当函数执行完毕或者返回时，该函数本身也会被系统销毁")])])]),s._v(" "),n("h3",{attrs:{id:"函数使用的注意事项和细节讨论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数使用的注意事项和细节讨论"}},[s._v("#")]),s._v(" 函数使用的注意事项和细节讨论")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("函数的形参列表可以是多个，返回值列表也可以是多个")])]),s._v(" "),n("li",[n("p",[s._v("形参列表和返回值列表的数据类型可以是值类型和引用类型。")])]),s._v(" "),n("li",[n("p",[s._v("函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写该函数可以被本包文件和其")]),s._v(" "),n("p",[s._v("它包文件使用，类似 public , 首字母小写，只能被本包文件使用，其它包文件不能使用，类似 private")])]),s._v(" "),n("li",[n("p",[s._v("函数中的变量是局部的，函数外不生效")])]),s._v(" "),n("li",[n("p",[s._v("基本数据类型和数组默认都是值传递的，即进行值拷贝。在函数内修改，不会影响到原来的值。(引用类型实际上传入的是地址拷贝，也是值传递)")])]),s._v(" "),n("li",[n("p",[s._v("如果希望函数内的变量能修改函数外的变量(指的是默认以值传递的方式的数据类型)，可以传入变量的地址&，函数内以指针的方式操作变量。从效果上看类似引用 。")])]),s._v(" "),n("li",[n("p",[s._v("在 Go 中，函数也是一种数据类型，可以赋值给一个变量，则该变量就是一个函数类型的变量了。通过该变量可以对函数调用（匿名函数当参数）")])]),s._v(" "),n("li",[n("p",[s._v("Go 函数不支持函数重载")])]),s._v(" "),n("li",[n("p",[s._v("为了简化数据类型定义，Go 支持自定义数据类型，struct 支持函数定义")])]),s._v(" "),n("li",[n("p",[s._v("支持对函数返回值命名")])]),s._v(" "),n("li",[n("p",[s._v("Go 支持可变参数")])])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" fn "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" fff "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\nname "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"duc"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// args 是切片*")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// args... int 和 args ...int 都可以写，亲测*")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" sum "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h3",{attrs:{id:"init-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#init-函数"}},[s._v("#")]),s._v(" init 函数")]),s._v(" "),n("blockquote",[n("p",[s._v("每一个源文件都可以包含一个或者多个 init 函数，该函数会在 main 函数执行前，被 Go 运行框架调用，也就是说 init 会在 main 函数前被调用。init 不能被其他函数调用*")])]),s._v(" "),n("h3",{attrs:{id:"init-函数的注意事项和细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#init-函数的注意事项和细节"}},[s._v("#")]),s._v(" init 函数的注意事项和细节")]),s._v(" "),n("ul",[n("li",[s._v("如果一个文件同时包含全局变量定义，init 函数和 main 函数，则执行的流程全局变量定义->init 函数->main 函数")])]),s._v(" "),n("h3",{attrs:{id:"匿名函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[s._v("#")]),s._v(" 匿名函数")]),s._v(" "),n("ul",[n("li",[s._v("在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次。")])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        fn "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("将匿名函数赋给一个变量(函数变量)，再通过该变量来调用匿名函数")])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n   a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("如果将匿名函数赋给一个全局变量，那么这个匿名函数，就成为一个全局匿名函数，可以在程序有效。")])]),s._v(" "),n("h3",{attrs:{id:"闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[s._v("#")]),s._v(" 闭包")]),s._v(" "),n("blockquote",[n("p",[s._v("闭包就是一个函数和与其相关的引用环境组合的一个整体(实体)*")])]),s._v(" "),n("blockquote"),s._v(" "),n("blockquote",[n("p",[s._v("好处是不用重复传入变量*")])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("closure")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" x\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" num\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n\nc "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("closure")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("c")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("ol",[n("li",[s._v("大家可以这样理解: 闭包是类, 函数是操作，n 是字段。函数和它使用到 n 构成闭包。")])]),s._v(" "),n("h2",{attrs:{id:"函数的-defer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数的-defer"}},[s._v("#")]),s._v(" 函数的 defer")]),s._v(" "),n("blockquote",[n("p",[s._v("在函数中，程序员经常需要创建资源(比如:数据库连接、文件句柄、锁等) ，为了在函数执行完毕后，及时的释放资源，Go 的设计者􏰂供 defer (延时机制)。*")])]),s._v(" "),n("h3",{attrs:{id:"defer-的注意事项和细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#defer-的注意事项和细节"}},[s._v("#")]),s._v(" defer 的注意事项和细节")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("当 go 执行到一个 defer 时，不会立即执行 defer 后的语句，而是将 defer 后的语句压入到一个栈中")])]),s._v(" "),n("li",[n("p",[s._v("当函数执行完毕后，在从 defer 栈中，依次从栈顶取出语句执行(注:遵守栈 先入后出的机制)，")])]),s._v(" "),n("li",[n("p",[s._v("在 defer 将语句放入到栈时，也会将相关的值拷贝同时入栈")])]),s._v(" "),n("li",[n("p",[s._v("defer 最主要的价值是在，当函数执行完毕后，可以及时的释放函数创建的资源")])])]),s._v(" "),n("h3",{attrs:{id:"函数参数传递方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数参数传递方式"}},[s._v("#")]),s._v(" 函数参数传递方式")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("值传递")])]),s._v(" "),n("li",[n("p",[s._v("引用传递")])])]),s._v(" "),n("p",[s._v("其实，不管是值传递还是引用传递，****传递给函数的都是变量的副本****，不同的是，值传递的是值的 拷贝，****引用传递的是地址的拷贝****，一般来说，地址拷贝效率高，因为数据量小，而值拷贝决定拷贝的 数据大小，数据越大，效率越低。")]),s._v(" "),n("h3",{attrs:{id:"值类型和引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#值类型和引用类型"}},[s._v("#")]),s._v(" 值类型和引用类型")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("值类型:基本数据类型 int 系列, float 系列, bool, string 、数组和结构体 struct")])]),s._v(" "),n("li",[n("p",[s._v("指针、slice 切片、map、管道 chan、interface 等都是引用类型")])])]),s._v(" "),n("h3",{attrs:{id:"值传递和引用传递使用特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#值传递和引用传递使用特点"}},[s._v("#")]),s._v(" 值传递和引用传递使用特点")]),s._v(" "),n("p",[n("img",{attrs:{src:a(676),alt:"2019_07_28_pe1Xmt26p9.png"}})]),s._v(" "),n("h3",{attrs:{id:"变量作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[s._v("#")]),s._v(" 变量作用域")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("函数内部声明/定义的变量叫局部变量，作用域仅限于函数内部")])]),s._v(" "),n("li",[n("p",[s._v("函数外部声明/定义的变量叫全局变量，作用域在整个包都有效，如果其首字母为大写，则作用域在整个程序有效")])]),s._v(" "),n("li",[n("p",[s._v("如果变量是在一个代码块，比如 for / if 中，那么这个变量的的作用域就在该代码块")])])]),s._v(" "),n("h3",{attrs:{id:"字符串常用的系统函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串常用的系统函数"}},[s._v("#")]),s._v(" 字符串常用的系统函数")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("统计字符串的长度，按字节 len(str)")])]),s._v(" "),n("li",[n("p",[s._v("字符串遍历，同时处理有中文的问题 r := []rune(str)")])]),s._v(" "),n("li",[n("p",[s._v('字符串转整数: n, err := strconv.Atoi("12")')])]),s._v(" "),n("li",[n("p",[s._v("整数转字符串 str = strconv.Itoa(12345)")])]),s._v(" "),n("li",[n("p",[s._v('字符串 转 []byte: var bytes = []byte("hello go")')])]),s._v(" "),n("li",[n("p",[s._v("[]byte 转 字符串: str = string([]byte{97, 98, 99})")])]),s._v(" "),n("li",[n("p",[s._v("10 进制转 2, 8, 16 进制: str = strconv.FormatInt(123, 2) // 2-> 8 , 16")])]),s._v(" "),n("li",[n("p",[s._v('查找子串是否在指定的字符串中: strings.Contains("seafood", "foo") //true')])]),s._v(" "),n("li",[n("p",[s._v('统计一个字符串有几个指定的子串 : strings.Count("ceheese", "e") //4')])]),s._v(" "),n("li",[n("p",[s._v('不区分大小写的字符串比较(==是区分字母大小写的):fmt.Println(strings.EqualFold("abc","Abc")) // true')])]),s._v(" "),n("li",[n("p",[s._v('返回子串在字符串第一次出现的 index 值，如果没有返回-1 : strings.Index("NLT_abc", "abc") // 4')])]),s._v(" "),n("li",[n("p",[s._v('返回子串在字符串最后一次出现的 index，如没有返回-1 : strings.LastIndex("go golang", "go")')])]),s._v(" "),n("li",[n("p",[s._v('将指定的子串替换成 另外一个子串: strings.Replace("go go hello", "go", "go 语言", n) n 可以指定你希望替换几个，如果 n=-1 表示全部替换')])]),s._v(" "),n("li",[n("p",[s._v('按 照 指 定 的 某 个 字 符 ， 为 分 割 标 识 ， 将 一 个 字 符 串 拆 分 成 字 符 串 数 组 : strings.Split("hello,wrold,ok", ",")')])]),s._v(" "),n("li",[n("p",[s._v('将字符串的字母进行大小写的转换: strings.ToLower("Go") // go strings.ToUpper("Go") // GO')])]),s._v(" "),n("li",[n("p",[s._v('将字符串左右两边的空格去掉: strings.TrimSpace(" tn a lone gopher ntrn ")')])]),s._v(" "),n("li",[n("p",[s._v('将字符串左右两边指定的字符去掉 : strings.Trim("! hello! ", " !")')]),s._v(" "),n("p",[s._v('和 ""去掉')])]),s._v(" "),n("li",[n("p",[s._v('将字符串左边指定的字符去掉 : strings.TrimLeft("! hello! ", " !")')]),s._v(" "),n("p",[s._v('"去掉')])]),s._v(" "),n("li",[n("p",[s._v('判断字符串是否以指定的字符串开头: strings.HasPrefix("ftp://192.168.10.1", "ftp") // true')])]),s._v(" "),n("li",[n("p",[s._v('判断字符串是否以指定的字符串结束: strings.HasSuffix("NLT_abc.jpg", "abc") //false')])])]),s._v(" "),n("h4",{attrs:{id:"时间和日期相关函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间和日期相关函数"}},[s._v("#")]),s._v(" 时间和日期相关函数")]),s._v(" "),n("h3",{attrs:{id:"内置函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置函数"}},[s._v("#")]),s._v(" 内置函数")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("len:用来求长度，比如 string、array、slice、map、channel")])]),s._v(" "),n("li",[n("p",[s._v("new:用来分配内存，主要用来分配值类型，比如 int、float32,struct...返回的是指针")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(677),alt:"2019_07_28_DeiJwS3f8o.png"}})]),s._v(" "),n("h4",{attrs:{id:"使用-defer-recover-来处理错误"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-defer-recover-来处理错误"}},[s._v("#")]),s._v(" 使用 defer+recover 来处理错误")]),s._v(" "),n("p",[n("img",{attrs:{src:a(678),alt:"2019_07_28_W4oOtQlYKK.png"}})]),s._v(" "),n("h3",{attrs:{id:"自定义错误"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义错误"}},[s._v("#")]),s._v(" 自定义错误")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v('errors.New("错误说明")')]),s._v(" , 会返回一个 error 类型的值，表示一个错误")])]),s._v(" "),n("li",[n("p",[s._v("panic 内置函数 ,接收一个 interface{}类型的值(也就是任何值了)作为参数。可以接收 error 类型的变量，输出错误信息，并退出程序.")])])]),s._v(" "),n("h2",{attrs:{id:"数组与切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组与切片"}},[s._v("#")]),s._v(" 数组与切片")]),s._v(" "),n("h4",{attrs:{id:"数组定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组定义"}},[s._v("#")]),s._v(" 数组定义")]),s._v(" "),n("ul",[n("li",[s._v("var 数组名 [数组大小]数据类型")])]),s._v(" "),n("h4",{attrs:{id:"数组在内存布局-重要"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组在内存布局-重要"}},[s._v("#")]),s._v(" 数组在内存布局(重要)")]),s._v(" "),n("blockquote",[n("p",[s._v("数组是一种非常有用的数据结构，因为其占用的内存是连续分配的。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(679),alt:"2019_07_28_KAk0d9mhZC.png"}})]),s._v(" "),n("h3",{attrs:{id:"数组使用的注意事项和细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组使用的注意事项和细节"}},[s._v("#")]),s._v(" 数组使用的注意事项和细节")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("数组是多个相同类型数据的组合,一个数组一旦声明/定义了,其长度是固定的, 不能动态变化")])]),s._v(" "),n("li",[n("p",[s._v("数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。")])]),s._v(" "),n("li",[n("p",[s._v("数组创建后，如果没有赋值，有对应类型默认值")])]),s._v(" "),n("li",[n("p",[s._v("使用数组的步骤 1. 声明数组并开辟空间 2 给数组各个元素赋值(默认零值) 3 使用数组")])]),s._v(" "),n("li",[n("p",[s._v("数组的下标是从 0 开始的")])]),s._v(" "),n("li",[n("p",[s._v("数组下标必须在指定范围内使用，否则报 panic:数组越界，")])]),s._v(" "),n("li",[n("p",[s._v("Go 的数组属值类型， 在默认情况下是值传递， 因此会进行值拷贝。数组间不会相互影响")])]),s._v(" "),n("li",[n("p",[s._v("如想在其它函数中，去修改原来的数组，可以使用引用传递(指针方式)")])]),s._v(" "),n("li",[n("p",[s._v("长度是数组类型的一部分，在传递函数参数时 需要考虑数组的长度")])])]),s._v(" "),n("h3",{attrs:{id:"切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切片"}},[s._v("#")]),s._v(" 切片")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("切片的英文是 slice")])]),s._v(" "),n("li",[n("p",[s._v("切片是数组的一个引用，因此切片是引用类型，在进行传递时，遵守引用传递的机制。")])]),s._v(" "),n("li",[n("p",[s._v("切片的使用和数组类似，遍历切片、访问切片的元素和求切片长度 len(slice)都一样。")])]),s._v(" "),n("li",[n("p",[s._v("切片的长度是可以变化的，因此切片是一个可以动态变化数组。")])]),s._v(" "),n("li",[n("p",[s._v("var 切片名 []类型")])])]),s._v(" "),n("h4",{attrs:{id:"切片在内存中形式-重要"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切片在内存中形式-重要"}},[s._v("#")]),s._v(" 切片在内存中形式(重要)")]),s._v(" "),n("p",[n("img",{attrs:{src:a(680),alt:"2019_07_28_6fsSGQnRWD.png"}})]),s._v(" "),n("h4",{attrs:{id:"切片的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切片的使用"}},[s._v("#")]),s._v(" 切片的使用")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("第一种方式:定义一个切片，然后让切片去引用一个已经创建好的数组，比如前面的案例就是这样的。")])]),s._v(" "),n("li",[n("p",[s._v("第二种方式:通过 make 来创建切片.")])]),s._v(" "),n("li",[n("p",[s._v("基本语法:var 切片名 []type = make([]type, len, [cap])")])]),s._v(" "),n("li",[n("p",[s._v("参数说明: type: 就是数据类型 len : 大小 cap :指定切片容量，可选， 如果你分配了 cap,则要 求 cap>=len.")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(681),alt:"2019_07_30_jirWD1S0uz.png"}})]),s._v(" "),n("p",[s._v("对上面代码的小结:")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("通过 make 方式创建切片可以指定切片的大小和容量")])]),s._v(" "),n("li",[n("p",[s._v("如果没有给切片的各个元素赋值，那么就会使用默认值")])]),s._v(" "),n("li",[n("p",[s._v("通过 make 方式创建的切片对应的数组是由 make 底层维护，对外不可见，即只能通过 slice 去访问各个元素.")])])]),s._v(" "),n("ul",[n("li",[s._v("定义一个切片，直接就指定具体数组，使用原理类似 make 的方式")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(682),alt:"2019_07_30_9c2gGik7LS.png"}})]),s._v(" "),n("h4",{attrs:{id:"方式-1-和方式-2-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式-1-和方式-2-的区别"}},[s._v("#")]),s._v(" 方式 1 和方式 2 的区别")]),s._v(" "),n("p",[n("img",{attrs:{src:a(683),alt:"2019_07_30_oKK4RWgEPf.png"}})]),s._v(" "),n("h3",{attrs:{id:"切片的遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切片的遍历"}},[s._v("#")]),s._v(" 切片的遍历")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("for 循环常规方式遍历")])]),s._v(" "),n("li",[n("p",[s._v("for-range 结构遍历切片")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(684),alt:"2019_07_30_okC3RrPTva.png"}})]),s._v(" "),n("h3",{attrs:{id:"切片的使用的注意事项和细节讨论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切片的使用的注意事项和细节讨论"}},[s._v("#")]),s._v(" 切片的使用的注意事项和细节讨论")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("切片初始化时 "),n("code",[s._v("var slice = arr[startIndex:endIndex]")])])]),s._v(" "),n("li",[n("p",[s._v("切片初始化时，仍然不能越界。范围在 "),n("code",[s._v("[0-len(arr)]")]),s._v(" 之间，但是可以动态增长")])]),s._v(" "),n("li")]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" slice "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 可以简写 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" slice "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" slice "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 可以简写"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" slice "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" slice "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 可以简写"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" slice "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ol",{attrs:{start:"4"}},[n("li",[n("p",[s._v("cap 是一个内置函数，用于统计切片的容量，即最大可以存放多少个元素")])]),s._v(" "),n("li",[n("p",[s._v("切片定义完后，还不能使用，因为本身是一个空的，需要让其引用到一个数组，或者 make 一 个空间供切片来使用")])]),s._v(" "),n("li",[n("p",[s._v("切片可以继续切片")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(685),alt:"2019_07_30_LnbvMIacRc.png"}})]),s._v(" "),n("ol",{attrs:{start:"7"}},[n("li",[s._v("用 append 内置函数，可以对切片进行动态追加")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(686),alt:"2019_07_30_nKxvcn7HUC.png"}})]),s._v(" "),n("h3",{attrs:{id:"切片-append-操作的底层原理分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切片-append-操作的底层原理分析"}},[s._v("#")]),s._v(" 切片 append 操作的底层原理分析")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("切片 append 操作的本质就是对数组扩容")])]),s._v(" "),n("li",[n("p",[s._v("go 底层会创建一下新的数组 newArr(安装扩容后大小)")])]),s._v(" "),n("li",[n("p",[s._v("将 slice 原来包含的元素拷贝到新的数组 newArr")])]),s._v(" "),n("li",[n("p",[s._v("slice 重新引用到 newArr")])]),s._v(" "),n("li",[n("p",[s._v("注意 newArr 是在底层来维护的，程序员不可见.")])])]),s._v(" "),n("ol",{attrs:{start:"8"}},[n("li",[s._v("切片的拷贝操作")])]),s._v(" "),n("p",[s._v("切片使用 copy 内置函数完成拷贝，举例说明")]),s._v(" "),n("p",[n("img",{attrs:{src:a(687),alt:"2019_07_30_VrchxNcjuT.png"}})]),s._v(" "),n("p",[s._v("对上面代码的说明")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("copy(para1, para2) 参数的数据类型是切片")])]),s._v(" "),n("li",[n("p",[s._v("按照上面的代码来看,slice4和slice5的数据空间是独立，相互不影响，也就是说 slice4[0]=999,slice5[0] 仍然是 1")])]),s._v(" "),n("li",[n("p",[s._v("slice5 长度比4短也行的，有多长拷贝多长")])])]),s._v(" "),n("h3",{attrs:{id:"string-和-slice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-和-slice"}},[s._v("#")]),s._v(" string 和 slice")]),s._v(" "),n("ol",[n("li",[s._v("string 底层是一个 byte 数组，因此 string 也可以进行切片处理 案例演示:")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(688),alt:"2019_07_30_QlaXPniL3h.png"}})]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v('string 和切片在内存的形式，以 "abcd" 画出内存示意图')])]),s._v(" "),n("p",[n("img",{attrs:{src:a(689),alt:"2019_07_30_ZI3XsXv496.png"}})]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("p",[s._v("string 是不可变的，也就说不能通过 str[0] = 'z' 方式来修改字符串")])]),s._v(" "),n("li",[n("p",[s._v("如果需要修改字符串，可以先将 string -> []byte / 或者 []rune -> 修改 -> 重写转成 string")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(690),alt:"2019_07_30_qubcBjll1T.png"}})]),s._v(" "),n("h3",{attrs:{id:"二维数组快速入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二维数组快速入门"}},[s._v("#")]),s._v(" 二维数组快速入门")]),s._v(" "),n("ol",[n("li",[s._v("使用方式 1: 先声明/定义,再赋值 "),n("code",[s._v("var name [大小][大小]类型")])])]),s._v(" "),n("h4",{attrs:{id:"内存中存在形式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存中存在形式"}},[s._v("#")]),s._v(" 内存中存在形式")]),s._v(" "),n("p",[n("img",{attrs:{src:a(691),alt:"2019_07_30_0MbS1JEpGG.png"}})]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("使用方式 2: 直接初始化")])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 数组名 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("类型 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("类型"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n\n赋值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("有默认值，比如 "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" 类型的就是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n\n二维数组在声明"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("定义时也对应有四种写法"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("和一维数组类似"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 数组名 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("类型 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("类型"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 数组名 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("类型 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("类型"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 数组名 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("类型"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("`\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 数组名 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("大小"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("类型"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("初值"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"二维数组的遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二维数组的遍历"}},[s._v("#")]),s._v(" 二维数组的遍历")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("双层 for 循环完成遍历")])]),s._v(" "),n("li",[n("p",[s._v("for-range 方式完成遍历")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(692),alt:"2019_07_30_ApjZ7eqckS.png"}})]),s._v(" "),n("h2",{attrs:{id:"map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[s._v("#")]),s._v(" map")]),s._v(" "),n("blockquote",[n("p",[s._v("map 是 key-value 数据结构，又称为字段或者关联数组。类似其它编程语言的集合，在编程中是经常使用到")])]),s._v(" "),n("h3",{attrs:{id:"基本语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[s._v("#")]),s._v(" 基本语法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var map 变量名 `map[keytype]valuetype`\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"key-可以是什么类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#key-可以是什么类型"}},[s._v("#")]),s._v(" key 可以是什么类型")]),s._v(" "),n("p",[s._v("golang 中的 map，的 key 可以是很多种类型，比如 bool, 数字，string, 指针, channel , 还可以是只包含前面几个类型的 接口, 结构体, 数组。")]),s._v(" "),n("blockquote",[n("p",[s._v("通常 key 为 int 、string")])]),s._v(" "),n("blockquote",[n("p",[s._v("注意: slice， map 还有 function 不可以，因为这几个没法用 == 来判断")])]),s._v(" "),n("p",[s._v("valuetype 可以是什么类型")]),s._v(" "),n("p",[s._v("valuetype 的类型和 key 基本一样，这里我就不再赘述了，通常为: 数字(整数,浮点数),string,map,struct")]),s._v(" "),n("h3",{attrs:{id:"map-声明的举例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-声明的举例"}},[s._v("#")]),s._v(" map 声明的举例")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("var a map[string]string")])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("var a map[string]int")])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("var a map[int]string")])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("var a map[string]map[string]string")])])])]),s._v(" "),n("blockquote",[n("p",[s._v("注意:声明是不会分配内存的，初始化需要 make ，分配内存后才能赋值和使用。*")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(693),alt:"2019_07_30_mTKq9veU7q.png"}})]),s._v(" "),n("ol",[n("li",[n("p",[s._v("map 在使用前一定要 make")])]),s._v(" "),n("li",[n("p",[s._v("map 的 key 是不能重复，如果重复了，则以最后这个 key-value 为准")])]),s._v(" "),n("li",[n("p",[s._v("map 的 value 是可以相同的.")])]),s._v(" "),n("li",[n("p",[s._v("map 的 key-value 是无序(现在是有序的)")])]),s._v(" "),n("li",[n("p",[s._v("make 内置函数数目")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(694),alt:"2019_07_30_67PZMRN05w.png"}})]),s._v(" "),n("h3",{attrs:{id:"map-的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-的使用"}},[s._v("#")]),s._v(" map 的使用")]),s._v(" "),n("p",[n("img",{attrs:{src:a(695),alt:"2019_07_30_ChMRLo77uU.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(696),alt:"2019_07_30_L01vUXDWtq.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(697),alt:"2019_07_30_7Kfd3wdKL6.png"}})]),s._v(" "),n("h3",{attrs:{id:"map-的增删改查操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-的增删改查操作"}},[s._v("#")]),s._v(" map 的增删改查操作")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("map 增加和更新")])]),s._v(" "),n("li",[n("p",[s._v('delete(map，"key") ，delete 是一个内置函数，如果 key 存在，就删除该 key-value,如果 key 不存在，不操作，但是也不会报错')])]),s._v(" "),n("li",[n("p",[s._v("如果我们要删除 map 的所有 key ,没有一个专门的方法一次删除，可以遍历一下 key, 逐个删除或者 map = make(...)，make 一个新的，让原来的成为垃圾，被 gc回收")])])]),s._v(" "),n("h3",{attrs:{id:"map-遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-遍历"}},[s._v("#")]),s._v(" map 遍历")]),s._v(" "),n("blockquote",[n("p",[s._v("案例演示相对复杂的 map 遍历:该 map 的 value 又是一个 map")])]),s._v(" "),n("blockquote"),s._v(" "),n("blockquote",[n("p",[s._v("说明:map 的遍历使用 for-range 的结构遍历")])]),s._v(" "),n("h3",{attrs:{id:"map-的长度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-的长度"}},[s._v("#")]),s._v(" map 的长度")]),s._v(" "),n("p",[n("img",{attrs:{src:a(698),alt:"2019_07_30_muTqidWJaY.png"}})]),s._v(" "),n("h3",{attrs:{id:"map-切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-切片"}},[s._v("#")]),s._v(" map 切片")]),s._v(" "),n("blockquote",[n("p",[s._v("切片的数据类型如果是 map，则我们称为 slice of map，map 切片，这样使用则 map 个数就可以动态变化了*")])]),s._v(" "),n("h4",{attrs:{id:"map-使用细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-使用细节"}},[s._v("#")]),s._v(" map 使用细节")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("map 是引用类型，遵守引用类型传递的机制，在一个函数接收 map，修改后，会直接修改原来的 map")])]),s._v(" "),n("li",[n("p",[s._v("map 的容量达到后，再想 map 增加元素，会自动扩容，并不会发生 panic，也就是说 map 能动态的增长 键值对(key-value)")])]),s._v(" "),n("li",[n("p",[s._v("map 的 value 也经常使用 struct 类型，更适合管理复杂的数据(比前面 value 是一个 map 更好)")])])]),s._v(" "),n("h2",{attrs:{id:"切片容量相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切片容量相关"}},[s._v("#")]),s._v(" 切片容量相关")]),s._v(" "),n("h3",{attrs:{id:"q-为什么nil切片打印出来是-而不是nil-️"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#q-为什么nil切片打印出来是-而不是nil-️"}},[s._v("#")]),s._v(" Q: 为什么nil切片打印出来是[] 而不是nil⁉️")]),s._v(" "),n("blockquote",[n("p",[s._v("函数 append 会智能地处理底层数组的容量增长。在切片的容量小于 1000 个元素时，总是 会成倍地增加容量。一旦元素个数超过 1000，容量的增长因子会设为 1.25，也就是会每次增加 25%的容量。随着语言的演化，这种增长算法可能会有所改变。*")])]),s._v(" "),n("blockquote",[n("p",[s._v("上面有错，扩容策略并不是简单的扩为原切片容量的* "),n("em",[n("code",[s._v("2")])]),s._v(" "),n("em",[s._v("倍或")]),s._v(" "),n("em",[n("code",[s._v("1.25")])]),s._v(" "),n("em",[s._v("倍，还有内存对齐的操作。扩容后的容量 >= 原容量的")]),s._v(" "),n("em",[n("code",[s._v("2")])]),s._v(" "),n("em",[s._v("倍或")]),s._v(" "),n("em",[n("code",[s._v("1.25")])]),s._v(" "),n("em",[s._v("倍。https://juejin.im/post/5ca2b75f51882543ea4b81c8")])])]),s._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 长度和容量都为3*")]),s._v("\n\ns1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ns1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\ns1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\ns1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n\n\ns2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\ns2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ns2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\nfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Output: [0 1 2] [10 2 3]")]),s._v("\n\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 长度3和容量4")]),s._v("\n\na1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\na1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\na1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\na1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n\n\na2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" a1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\na2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\na2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\nfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Output: [0 10 2] [10 2 3]*")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br")])]),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建两个切片，并分别用两个整数进行初始化* ")]),s._v("\n\ns1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\ns2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将两个切片追加在一起，并显示结果* ")]),s._v("\n\nfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%v"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//    Output:    [1 2 3 4]*")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("blockquote",[n("p",[s._v("映射的键可以是任何值。这个值的类型可以是内置的类型，也可以是结构类型，只要这个值 可以使用==运算符做比较。切片、函数以及包含切片的结构类型这些类型由于具有引用语义， 不能作为映射的键，使用这些类型会造成编译错误")])])])}),[],!1,null,null,null);t.default=r.exports}}]);